//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TimeLog.ReportingAPI.SDK
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.timelog.com/ws/tlp/v4_4", ConfigurationName="TimeLog.ReportingAPI.SDK.ServiceSoap")]
    public interface ServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetWorkUnitsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetWorkUnitsRaw(string siteCode, string apiID, string apiPassword, int workUnitID, int employeeID, int allocationID, int taskID, int projectID, int departmentID, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetWorkUnitsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetWorkUnitsRawAsync(string siteCode, string apiID, string apiPassword, int workUnitID, int employeeID, int allocationID, int taskID, int projectID, int departmentID, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetAllocationsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetAllocationsRaw(string siteCode, string apiID, string apiPassword, int allocationID, int taskID, int employeeID, int projectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetAllocationsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetAllocationsRawAsync(string siteCode, string apiID, string apiPassword, int allocationID, int taskID, int employeeID, int projectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEmployeesShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetEmployeesShortList(string siteCode, string apiID, string apiPassword, int departmentID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEmployeesShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetEmployeesShortListAsync(string siteCode, string apiID, string apiPassword, int departmentID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEmployeesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetEmployeesRaw(string siteCode, string apiID, string apiPassword, int employeeID, string initials, int departmentID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEmployeesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetEmployeesRawAsync(string siteCode, string apiID, string apiPassword, int employeeID, string initials, int departmentID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetTimeOffRegistrationsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetTimeOffRegistrationsRaw(string siteCode, string apiID, string apiPassword, int employeeID, int departmentID, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetTimeOffRegistrationsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetTimeOffRegistrationsRawAsync(string siteCode, string apiID, string apiPassword, int employeeID, int departmentID, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetFlexTimeRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetFlexTimeRaw(string siteCode, string apiID, string apiPassword, int employeeUserID, int departmentID, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetFlexTimeRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetFlexTimeRawAsync(string siteCode, string apiID, string apiPassword, int employeeUserID, int departmentID, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetCustomersShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetCustomersShortList(string siteCode, string apiID, string apiPassword, int customerStatusID, int accountManagerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetCustomersShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetCustomersShortListAsync(string siteCode, string apiID, string apiPassword, int customerStatusID, int accountManagerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetContractCustomersRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetContractCustomersRaw(string siteCode, string apiID, string apiPassword, int projectID, int customerID, int projectSubContractID, int contractStatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetContractCustomersRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetContractCustomersRawAsync(string siteCode, string apiID, string apiPassword, int projectID, int customerID, int projectSubContractID, int contractStatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetCustomersRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetCustomersRaw(string siteCode, string apiID, string apiPassword, int customerID, int customerStatusID, int accountManagerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetCustomersRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetCustomersRawAsync(string siteCode, string apiID, string apiPassword, int customerID, int customerStatusID, int accountManagerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetCustomerStatusChangesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetCustomerStatusChangesRaw(string siteCode, string apiID, string apiPassword, System.DateTime fromDate, System.DateTime toDate, int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetCustomerStatusChangesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetCustomerStatusChangesRawAsync(string siteCode, string apiID, string apiPassword, System.DateTime fromDate, System.DateTime toDate, int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetCustomerCommentsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetCustomerCommentsRaw(string siteCode, string apiID, string apiPassword, int customerID, int customerStatusID, int accountManagerID, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetCustomerCommentsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetCustomerCommentsRawAsync(string siteCode, string apiID, string apiPassword, int customerID, int customerStatusID, int accountManagerID, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetCustomerStatusShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetCustomerStatusShortList(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetCustomerStatusShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetCustomerStatusShortListAsync(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetContactsShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetContactsShortList(string siteCode, string apiID, string apiPassword, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetContactsShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetContactsShortListAsync(string siteCode, string apiID, string apiPassword, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetContactsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetContactsRaw(string siteCode, string apiID, string apiPassword, int customerID, int contactID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetContactsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetContactsRawAsync(string siteCode, string apiID, string apiPassword, int customerID, int contactID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetExpensesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetExpensesRaw(string siteCode, string apiID, string apiPassword, int customerID, int projectID, int supplierCustomerID, int employeeID, int employeeDepartmentID, int expenseTypeID, int paymentMethodID, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetExpensesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetExpensesRawAsync(string siteCode, string apiID, string apiPassword, int customerID, int projectID, int supplierCustomerID, int employeeID, int employeeDepartmentID, int expenseTypeID, int paymentMethodID, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetProjectsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetProjectsRaw(string siteCode, string apiID, string apiPassword, int projectID, int status, int customerID, int projectManagerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetProjectsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProjectsRawAsync(string siteCode, string apiID, string apiPassword, int projectID, int status, int customerID, int projectManagerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetProjectsShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetProjectsShortList(string siteCode, string apiID, string apiPassword, int status, int customerID, int projectManagerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetProjectsShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProjectsShortListAsync(string siteCode, string apiID, string apiPassword, int status, int customerID, int projectManagerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetProjectTypesShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetProjectTypesShortList(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetProjectTypesShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProjectTypesShortListAsync(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetProjectCategoriesShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetProjectCategoriesShortList(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetProjectCategoriesShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProjectCategoriesShortListAsync(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetInvoicesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetInvoicesRaw(string siteCode, string apiID, string apiPassword, int invoiceID, int customerID, int status, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetInvoicesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetInvoicesRawAsync(string siteCode, string apiID, string apiPassword, int invoiceID, int customerID, int status, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetInvoiceLinesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetInvoiceLinesRaw(string siteCode, string apiID, string apiPassword, int invoiceLineID, int customerID, int projectID, int invoiceID, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetInvoiceLinesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetInvoiceLinesRawAsync(string siteCode, string apiID, string apiPassword, int invoiceLineID, int customerID, int projectID, int invoiceID, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetInvoiceLineDetailsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetInvoiceLineDetailsRaw(string siteCode, string apiID, string apiPassword, int invoiceLineDetailID, int customerID, int projectID, int invoiceID, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetInvoiceLineDetailsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetInvoiceLineDetailsRawAsync(string siteCode, string apiID, string apiPassword, int invoiceLineDetailID, int customerID, int projectID, int invoiceID, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetDepartmentsShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetDepartmentsShortList(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetDepartmentsShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetDepartmentsShortListAsync(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetTasksRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetTasksRaw(string siteCode, string apiID, string apiPassword, int taskID, int projectID, int status, int taskTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetTasksRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetTasksRawAsync(string siteCode, string apiID, string apiPassword, int taskID, int projectID, int status, int taskTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetTasksShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetTasksShortList(string siteCode, string apiID, string apiPassword, int projectID, int status, int taskTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetTasksShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetTasksShortListAsync(string siteCode, string apiID, string apiPassword, int projectID, int status, int taskTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetTaskTypesShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetTaskTypesShortList(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetTaskTypesShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetTaskTypesShortListAsync(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetMilestonesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetMilestonesRaw(string siteCode, string apiID, string apiPassword, int milestoneID, int projectID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetMilestonesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetMilestonesRawAsync(string siteCode, string apiID, string apiPassword, int milestoneID, int projectID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetMilestoneTypesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetMilestoneTypesRaw(string siteCode, string apiID, string apiPassword, int milestoneTypeID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetMilestoneTypesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetMilestoneTypesRawAsync(string siteCode, string apiID, string apiPassword, int milestoneTypeID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetMileageRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetMileageRaw(string siteCode, string apiID, string apiPassword, int customerID, int projectID, int employeeID, int departmentID, string startDate, string endDate, int selfPayment, int travelCarID, int transportRateID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetMileageRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetMileageRawAsync(string siteCode, string apiID, string apiPassword, int customerID, int projectID, int employeeID, int departmentID, string startDate, string endDate, int selfPayment, int travelCarID, int transportRateID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetOpportunitiesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetOpportunitiesRaw(string siteCode, string apiID, string apiPassword, int opportunityID, int customerID, int ownerID, int opportunityTypeID, int barrierID, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetOpportunitiesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetOpportunitiesRawAsync(string siteCode, string apiID, string apiPassword, int opportunityID, int customerID, int ownerID, int opportunityTypeID, int barrierID, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSubOpportunitiesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetSubOpportunitiesRaw(string siteCode, string apiID, string apiPassword, int opportunityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSubOpportunitiesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetSubOpportunitiesRawAsync(string siteCode, string apiID, string apiPassword, int opportunityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetOpportunityTypesShortlist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetOpportunityTypesShortlist(string siteCode, string apiID, string apiPassword, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetOpportunityTypesShortlist", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetOpportunityTypesShortlistAsync(string siteCode, string apiID, string apiPassword, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetOpportunityStatusShortlist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetOpportunityStatusShortlist(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetOpportunityStatusShortlist", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetOpportunityStatusShortlistAsync(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetBarriersShortlist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetBarriersShortlist(string siteCode, string apiID, string apiPassword, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetBarriersShortlist", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetBarriersShortlistAsync(string siteCode, string apiID, string apiPassword, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetIndustriesShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetIndustriesShortList(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetIndustriesShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetIndustriesShortListAsync(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSupportTypesShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetSupportTypesShortList(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSupportTypesShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetSupportTypesShortListAsync(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSupportCaseRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetSupportCaseRaw(string siteCode, string apiID, string apiPassword, int supportCaseID, string supportNo, int employeeID, int customerID, int supportContractID, int supportTypeID, int departmentID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSupportCaseRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetSupportCaseRawAsync(string siteCode, string apiID, string apiPassword, int supportCaseID, string supportNo, int employeeID, int customerID, int supportContractID, int supportTypeID, int departmentID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSupportContractRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetSupportContractRaw(string siteCode, string apiID, string apiPassword, int supportContractID, int employeeID, int customerID, int supportContractTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSupportContractRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetSupportContractRawAsync(string siteCode, string apiID, string apiPassword, int supportContractID, int employeeID, int customerID, int supportContractTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSupportJournalRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetSupportJournalRaw(string siteCode, string apiID, string apiPassword, int supportCaseID, int employeeID, int customerID, int supportContractID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSupportJournalRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetSupportJournalRawAsync(string siteCode, string apiID, string apiPassword, int supportCaseID, int employeeID, int customerID, int supportContractID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetCountriesShortList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetCountriesShortList(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetCountriesShortList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetCountriesShortListAsync(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEventsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetEventsRaw(string siteCode, string apiID, string apiPassword, int eventID, int eventTypeID, int customerID, int employeeID, int status, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEventsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetEventsRawAsync(string siteCode, string apiID, string apiPassword, int eventID, int eventTypeID, int customerID, int employeeID, int status, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEventTypesShortlist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetEventTypesShortlist(string siteCode, string apiID, string apiPassword, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEventTypesShortlist", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetEventTypesShortlistAsync(string siteCode, string apiID, string apiPassword, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetWorkingHoursRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetWorkingHoursRaw(string siteCode, string apiID, string apiPassword, int employeeID, int departmentID, int status, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetWorkingHoursRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetWorkingHoursRawAsync(string siteCode, string apiID, string apiPassword, int employeeID, int departmentID, int status, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEmployeeNormalWorkingHoursRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetEmployeeNormalWorkingHoursRaw(string siteCode, string apiID, string apiPassword, int employeeID, int departmentID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEmployeeNormalWorkingHoursRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetEmployeeNormalWorkingHoursRawAsync(string siteCode, string apiID, string apiPassword, int employeeID, int departmentID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/ValidateCredentials", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool ValidateCredentials(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/ValidateCredentials", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> ValidateCredentialsAsync(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetContractsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetContractsRaw(string siteCode, string apiID, string apiPassword, int projectID, int contractModelType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetContractsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetContractsRawAsync(string siteCode, string apiID, string apiPassword, int projectID, int contractModelType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetHardBookingsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetHardBookingsRaw(string siteCode, string apiID, string apiPassword, int employeeUserId, System.DateTime startDate, System.DateTime endDate, int hardbookingType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetHardBookingsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetHardBookingsRawAsync(string siteCode, string apiID, string apiPassword, int employeeUserId, System.DateTime startDate, System.DateTime endDate, int hardbookingType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetLegalEntitiesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetLegalEntitiesRaw(string siteCode, string apiID, string apiPassword, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetLegalEntitiesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetLegalEntitiesRawAsync(string siteCode, string apiID, string apiPassword, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetPriceGroupsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetPriceGroupsRaw(string siteCode, string apiID, string apiPassword, int legalEntityId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetPriceGroupsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetPriceGroupsRawAsync(string siteCode, string apiID, string apiPassword, int legalEntityId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetHourlyRatesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetHourlyRatesRaw(string siteCode, string apiID, string apiPassword, int CustomerID, int Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetHourlyRatesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetHourlyRatesRawAsync(string siteCode, string apiID, string apiPassword, int CustomerID, int Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSalaryAccountsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetSalaryAccountsRaw(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSalaryAccountsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetSalaryAccountsRawAsync(string siteCode, string apiID, string apiPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSalaryAccountEmployeePostingsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetSalaryAccountEmployeePostingsRaw(string siteCode, string apiID, string apiPassword, int SalaryAccountID, int EmployeeUserID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetSalaryAccountEmployeePostingsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetSalaryAccountEmployeePostingsRawAsync(string siteCode, string apiID, string apiPassword, int SalaryAccountID, int EmployeeUserID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetGroupsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetGroupsRaw(string siteCode, string apiID, string apiPassword, int groupID, int typeID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetGroupsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetGroupsRawAsync(string siteCode, string apiID, string apiPassword, int groupID, int typeID, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetGroupUnitsRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetGroupUnitsRaw(string siteCode, string apiID, string apiPassword, int groupID, int customerID, int contactID, int opportunityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetGroupUnitsRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetGroupUnitsRawAsync(string siteCode, string apiID, string apiPassword, int groupID, int customerID, int contactID, int opportunityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEmployeeNormalWorkingTimeHistoriesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetEmployeeNormalWorkingTimeHistoriesRaw(string siteCode, string apiID, string apiPassword, int employeeUserID, int employeeStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEmployeeNormalWorkingTimeHistoriesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetEmployeeNormalWorkingTimeHistoriesRawAsync(string siteCode, string apiID, string apiPassword, int employeeUserID, int employeeStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEmployeeManagerHistoriesRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetEmployeeManagerHistoriesRaw(string siteCode, string apiID, string apiPassword, int employeeUserID, int employeeStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.timelog.com/ws/tlp/v4_4/GetEmployeeManagerHistoriesRaw", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetEmployeeManagerHistoriesRawAsync(string siteCode, string apiID, string apiPassword, int employeeUserID, int employeeStatus);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface ServiceSoapChannel : TimeLog.ReportingAPI.SDK.ServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class ServiceSoapClient : System.ServiceModel.ClientBase<TimeLog.ReportingAPI.SDK.ServiceSoap>, TimeLog.ReportingAPI.SDK.ServiceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), ServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Xml.XmlNode GetWorkUnitsRaw(string siteCode, string apiID, string apiPassword, int workUnitID, int employeeID, int allocationID, int taskID, int projectID, int departmentID, string startDate, string endDate)
        {
            return base.Channel.GetWorkUnitsRaw(siteCode, apiID, apiPassword, workUnitID, employeeID, allocationID, taskID, projectID, departmentID, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetWorkUnitsRawAsync(string siteCode, string apiID, string apiPassword, int workUnitID, int employeeID, int allocationID, int taskID, int projectID, int departmentID, string startDate, string endDate)
        {
            return base.Channel.GetWorkUnitsRawAsync(siteCode, apiID, apiPassword, workUnitID, employeeID, allocationID, taskID, projectID, departmentID, startDate, endDate);
        }
        
        public System.Xml.XmlNode GetAllocationsRaw(string siteCode, string apiID, string apiPassword, int allocationID, int taskID, int employeeID, int projectID)
        {
            return base.Channel.GetAllocationsRaw(siteCode, apiID, apiPassword, allocationID, taskID, employeeID, projectID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetAllocationsRawAsync(string siteCode, string apiID, string apiPassword, int allocationID, int taskID, int employeeID, int projectID)
        {
            return base.Channel.GetAllocationsRawAsync(siteCode, apiID, apiPassword, allocationID, taskID, employeeID, projectID);
        }
        
        public System.Xml.XmlNode GetEmployeesShortList(string siteCode, string apiID, string apiPassword, int departmentID, int status)
        {
            return base.Channel.GetEmployeesShortList(siteCode, apiID, apiPassword, departmentID, status);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetEmployeesShortListAsync(string siteCode, string apiID, string apiPassword, int departmentID, int status)
        {
            return base.Channel.GetEmployeesShortListAsync(siteCode, apiID, apiPassword, departmentID, status);
        }
        
        public System.Xml.XmlNode GetEmployeesRaw(string siteCode, string apiID, string apiPassword, int employeeID, string initials, int departmentID, int status)
        {
            return base.Channel.GetEmployeesRaw(siteCode, apiID, apiPassword, employeeID, initials, departmentID, status);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetEmployeesRawAsync(string siteCode, string apiID, string apiPassword, int employeeID, string initials, int departmentID, int status)
        {
            return base.Channel.GetEmployeesRawAsync(siteCode, apiID, apiPassword, employeeID, initials, departmentID, status);
        }
        
        public System.Xml.XmlNode GetTimeOffRegistrationsRaw(string siteCode, string apiID, string apiPassword, int employeeID, int departmentID, System.DateTime fromDate, System.DateTime toDate)
        {
            return base.Channel.GetTimeOffRegistrationsRaw(siteCode, apiID, apiPassword, employeeID, departmentID, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetTimeOffRegistrationsRawAsync(string siteCode, string apiID, string apiPassword, int employeeID, int departmentID, System.DateTime fromDate, System.DateTime toDate)
        {
            return base.Channel.GetTimeOffRegistrationsRawAsync(siteCode, apiID, apiPassword, employeeID, departmentID, fromDate, toDate);
        }
        
        public System.Xml.XmlNode GetFlexTimeRaw(string siteCode, string apiID, string apiPassword, int employeeUserID, int departmentID, System.DateTime fromDate, System.DateTime toDate)
        {
            return base.Channel.GetFlexTimeRaw(siteCode, apiID, apiPassword, employeeUserID, departmentID, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetFlexTimeRawAsync(string siteCode, string apiID, string apiPassword, int employeeUserID, int departmentID, System.DateTime fromDate, System.DateTime toDate)
        {
            return base.Channel.GetFlexTimeRawAsync(siteCode, apiID, apiPassword, employeeUserID, departmentID, fromDate, toDate);
        }
        
        public System.Xml.XmlNode GetCustomersShortList(string siteCode, string apiID, string apiPassword, int customerStatusID, int accountManagerID)
        {
            return base.Channel.GetCustomersShortList(siteCode, apiID, apiPassword, customerStatusID, accountManagerID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetCustomersShortListAsync(string siteCode, string apiID, string apiPassword, int customerStatusID, int accountManagerID)
        {
            return base.Channel.GetCustomersShortListAsync(siteCode, apiID, apiPassword, customerStatusID, accountManagerID);
        }
        
        public System.Xml.XmlNode GetContractCustomersRaw(string siteCode, string apiID, string apiPassword, int projectID, int customerID, int projectSubContractID, int contractStatusID)
        {
            return base.Channel.GetContractCustomersRaw(siteCode, apiID, apiPassword, projectID, customerID, projectSubContractID, contractStatusID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetContractCustomersRawAsync(string siteCode, string apiID, string apiPassword, int projectID, int customerID, int projectSubContractID, int contractStatusID)
        {
            return base.Channel.GetContractCustomersRawAsync(siteCode, apiID, apiPassword, projectID, customerID, projectSubContractID, contractStatusID);
        }
        
        public System.Xml.XmlNode GetCustomersRaw(string siteCode, string apiID, string apiPassword, int customerID, int customerStatusID, int accountManagerID)
        {
            return base.Channel.GetCustomersRaw(siteCode, apiID, apiPassword, customerID, customerStatusID, accountManagerID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetCustomersRawAsync(string siteCode, string apiID, string apiPassword, int customerID, int customerStatusID, int accountManagerID)
        {
            return base.Channel.GetCustomersRawAsync(siteCode, apiID, apiPassword, customerID, customerStatusID, accountManagerID);
        }
        
        public System.Xml.XmlNode GetCustomerStatusChangesRaw(string siteCode, string apiID, string apiPassword, System.DateTime fromDate, System.DateTime toDate, int employeeId)
        {
            return base.Channel.GetCustomerStatusChangesRaw(siteCode, apiID, apiPassword, fromDate, toDate, employeeId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetCustomerStatusChangesRawAsync(string siteCode, string apiID, string apiPassword, System.DateTime fromDate, System.DateTime toDate, int employeeId)
        {
            return base.Channel.GetCustomerStatusChangesRawAsync(siteCode, apiID, apiPassword, fromDate, toDate, employeeId);
        }
        
        public System.Xml.XmlNode GetCustomerCommentsRaw(string siteCode, string apiID, string apiPassword, int customerID, int customerStatusID, int accountManagerID, System.DateTime fromDate, System.DateTime toDate)
        {
            return base.Channel.GetCustomerCommentsRaw(siteCode, apiID, apiPassword, customerID, customerStatusID, accountManagerID, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetCustomerCommentsRawAsync(string siteCode, string apiID, string apiPassword, int customerID, int customerStatusID, int accountManagerID, System.DateTime fromDate, System.DateTime toDate)
        {
            return base.Channel.GetCustomerCommentsRawAsync(siteCode, apiID, apiPassword, customerID, customerStatusID, accountManagerID, fromDate, toDate);
        }
        
        public System.Xml.XmlNode GetCustomerStatusShortList(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetCustomerStatusShortList(siteCode, apiID, apiPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetCustomerStatusShortListAsync(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetCustomerStatusShortListAsync(siteCode, apiID, apiPassword);
        }
        
        public System.Xml.XmlNode GetContactsShortList(string siteCode, string apiID, string apiPassword, int customerID)
        {
            return base.Channel.GetContactsShortList(siteCode, apiID, apiPassword, customerID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetContactsShortListAsync(string siteCode, string apiID, string apiPassword, int customerID)
        {
            return base.Channel.GetContactsShortListAsync(siteCode, apiID, apiPassword, customerID);
        }
        
        public System.Xml.XmlNode GetContactsRaw(string siteCode, string apiID, string apiPassword, int customerID, int contactID)
        {
            return base.Channel.GetContactsRaw(siteCode, apiID, apiPassword, customerID, contactID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetContactsRawAsync(string siteCode, string apiID, string apiPassword, int customerID, int contactID)
        {
            return base.Channel.GetContactsRawAsync(siteCode, apiID, apiPassword, customerID, contactID);
        }
        
        public System.Xml.XmlNode GetExpensesRaw(string siteCode, string apiID, string apiPassword, int customerID, int projectID, int supplierCustomerID, int employeeID, int employeeDepartmentID, int expenseTypeID, int paymentMethodID, System.DateTime startDate, System.DateTime endDate)
        {
            return base.Channel.GetExpensesRaw(siteCode, apiID, apiPassword, customerID, projectID, supplierCustomerID, employeeID, employeeDepartmentID, expenseTypeID, paymentMethodID, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetExpensesRawAsync(string siteCode, string apiID, string apiPassword, int customerID, int projectID, int supplierCustomerID, int employeeID, int employeeDepartmentID, int expenseTypeID, int paymentMethodID, System.DateTime startDate, System.DateTime endDate)
        {
            return base.Channel.GetExpensesRawAsync(siteCode, apiID, apiPassword, customerID, projectID, supplierCustomerID, employeeID, employeeDepartmentID, expenseTypeID, paymentMethodID, startDate, endDate);
        }
        
        public System.Xml.XmlNode GetProjectsRaw(string siteCode, string apiID, string apiPassword, int projectID, int status, int customerID, int projectManagerID)
        {
            return base.Channel.GetProjectsRaw(siteCode, apiID, apiPassword, projectID, status, customerID, projectManagerID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProjectsRawAsync(string siteCode, string apiID, string apiPassword, int projectID, int status, int customerID, int projectManagerID)
        {
            return base.Channel.GetProjectsRawAsync(siteCode, apiID, apiPassword, projectID, status, customerID, projectManagerID);
        }
        
        public System.Xml.XmlNode GetProjectsShortList(string siteCode, string apiID, string apiPassword, int status, int customerID, int projectManagerID)
        {
            return base.Channel.GetProjectsShortList(siteCode, apiID, apiPassword, status, customerID, projectManagerID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProjectsShortListAsync(string siteCode, string apiID, string apiPassword, int status, int customerID, int projectManagerID)
        {
            return base.Channel.GetProjectsShortListAsync(siteCode, apiID, apiPassword, status, customerID, projectManagerID);
        }
        
        public System.Xml.XmlNode GetProjectTypesShortList(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetProjectTypesShortList(siteCode, apiID, apiPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProjectTypesShortListAsync(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetProjectTypesShortListAsync(siteCode, apiID, apiPassword);
        }
        
        public System.Xml.XmlNode GetProjectCategoriesShortList(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetProjectCategoriesShortList(siteCode, apiID, apiPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProjectCategoriesShortListAsync(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetProjectCategoriesShortListAsync(siteCode, apiID, apiPassword);
        }
        
        public System.Xml.XmlNode GetInvoicesRaw(string siteCode, string apiID, string apiPassword, int invoiceID, int customerID, int status, string startDate, string endDate)
        {
            return base.Channel.GetInvoicesRaw(siteCode, apiID, apiPassword, invoiceID, customerID, status, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetInvoicesRawAsync(string siteCode, string apiID, string apiPassword, int invoiceID, int customerID, int status, string startDate, string endDate)
        {
            return base.Channel.GetInvoicesRawAsync(siteCode, apiID, apiPassword, invoiceID, customerID, status, startDate, endDate);
        }
        
        public System.Xml.XmlNode GetInvoiceLinesRaw(string siteCode, string apiID, string apiPassword, int invoiceLineID, int customerID, int projectID, int invoiceID, string startDate, string endDate)
        {
            return base.Channel.GetInvoiceLinesRaw(siteCode, apiID, apiPassword, invoiceLineID, customerID, projectID, invoiceID, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetInvoiceLinesRawAsync(string siteCode, string apiID, string apiPassword, int invoiceLineID, int customerID, int projectID, int invoiceID, string startDate, string endDate)
        {
            return base.Channel.GetInvoiceLinesRawAsync(siteCode, apiID, apiPassword, invoiceLineID, customerID, projectID, invoiceID, startDate, endDate);
        }
        
        public System.Xml.XmlNode GetInvoiceLineDetailsRaw(string siteCode, string apiID, string apiPassword, int invoiceLineDetailID, int customerID, int projectID, int invoiceID, string startDate, string endDate)
        {
            return base.Channel.GetInvoiceLineDetailsRaw(siteCode, apiID, apiPassword, invoiceLineDetailID, customerID, projectID, invoiceID, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetInvoiceLineDetailsRawAsync(string siteCode, string apiID, string apiPassword, int invoiceLineDetailID, int customerID, int projectID, int invoiceID, string startDate, string endDate)
        {
            return base.Channel.GetInvoiceLineDetailsRawAsync(siteCode, apiID, apiPassword, invoiceLineDetailID, customerID, projectID, invoiceID, startDate, endDate);
        }
        
        public System.Xml.XmlNode GetDepartmentsShortList(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetDepartmentsShortList(siteCode, apiID, apiPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetDepartmentsShortListAsync(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetDepartmentsShortListAsync(siteCode, apiID, apiPassword);
        }
        
        public System.Xml.XmlNode GetTasksRaw(string siteCode, string apiID, string apiPassword, int taskID, int projectID, int status, int taskTypeID)
        {
            return base.Channel.GetTasksRaw(siteCode, apiID, apiPassword, taskID, projectID, status, taskTypeID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetTasksRawAsync(string siteCode, string apiID, string apiPassword, int taskID, int projectID, int status, int taskTypeID)
        {
            return base.Channel.GetTasksRawAsync(siteCode, apiID, apiPassword, taskID, projectID, status, taskTypeID);
        }
        
        public System.Xml.XmlNode GetTasksShortList(string siteCode, string apiID, string apiPassword, int projectID, int status, int taskTypeID)
        {
            return base.Channel.GetTasksShortList(siteCode, apiID, apiPassword, projectID, status, taskTypeID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetTasksShortListAsync(string siteCode, string apiID, string apiPassword, int projectID, int status, int taskTypeID)
        {
            return base.Channel.GetTasksShortListAsync(siteCode, apiID, apiPassword, projectID, status, taskTypeID);
        }
        
        public System.Xml.XmlNode GetTaskTypesShortList(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetTaskTypesShortList(siteCode, apiID, apiPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetTaskTypesShortListAsync(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetTaskTypesShortListAsync(siteCode, apiID, apiPassword);
        }
        
        public System.Xml.XmlNode GetMilestonesRaw(string siteCode, string apiID, string apiPassword, int milestoneID, int projectID, int status)
        {
            return base.Channel.GetMilestonesRaw(siteCode, apiID, apiPassword, milestoneID, projectID, status);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetMilestonesRawAsync(string siteCode, string apiID, string apiPassword, int milestoneID, int projectID, int status)
        {
            return base.Channel.GetMilestonesRawAsync(siteCode, apiID, apiPassword, milestoneID, projectID, status);
        }
        
        public System.Xml.XmlNode GetMilestoneTypesRaw(string siteCode, string apiID, string apiPassword, int milestoneTypeID, int status)
        {
            return base.Channel.GetMilestoneTypesRaw(siteCode, apiID, apiPassword, milestoneTypeID, status);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetMilestoneTypesRawAsync(string siteCode, string apiID, string apiPassword, int milestoneTypeID, int status)
        {
            return base.Channel.GetMilestoneTypesRawAsync(siteCode, apiID, apiPassword, milestoneTypeID, status);
        }
        
        public System.Xml.XmlNode GetMileageRaw(string siteCode, string apiID, string apiPassword, int customerID, int projectID, int employeeID, int departmentID, string startDate, string endDate, int selfPayment, int travelCarID, int transportRateID)
        {
            return base.Channel.GetMileageRaw(siteCode, apiID, apiPassword, customerID, projectID, employeeID, departmentID, startDate, endDate, selfPayment, travelCarID, transportRateID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetMileageRawAsync(string siteCode, string apiID, string apiPassword, int customerID, int projectID, int employeeID, int departmentID, string startDate, string endDate, int selfPayment, int travelCarID, int transportRateID)
        {
            return base.Channel.GetMileageRawAsync(siteCode, apiID, apiPassword, customerID, projectID, employeeID, departmentID, startDate, endDate, selfPayment, travelCarID, transportRateID);
        }
        
        public System.Xml.XmlNode GetOpportunitiesRaw(string siteCode, string apiID, string apiPassword, int opportunityID, int customerID, int ownerID, int opportunityTypeID, int barrierID, string startDate, string endDate)
        {
            return base.Channel.GetOpportunitiesRaw(siteCode, apiID, apiPassword, opportunityID, customerID, ownerID, opportunityTypeID, barrierID, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetOpportunitiesRawAsync(string siteCode, string apiID, string apiPassword, int opportunityID, int customerID, int ownerID, int opportunityTypeID, int barrierID, string startDate, string endDate)
        {
            return base.Channel.GetOpportunitiesRawAsync(siteCode, apiID, apiPassword, opportunityID, customerID, ownerID, opportunityTypeID, barrierID, startDate, endDate);
        }
        
        public System.Xml.XmlNode GetSubOpportunitiesRaw(string siteCode, string apiID, string apiPassword, int opportunityID)
        {
            return base.Channel.GetSubOpportunitiesRaw(siteCode, apiID, apiPassword, opportunityID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetSubOpportunitiesRawAsync(string siteCode, string apiID, string apiPassword, int opportunityID)
        {
            return base.Channel.GetSubOpportunitiesRawAsync(siteCode, apiID, apiPassword, opportunityID);
        }
        
        public System.Xml.XmlNode GetOpportunityTypesShortlist(string siteCode, string apiID, string apiPassword, int status)
        {
            return base.Channel.GetOpportunityTypesShortlist(siteCode, apiID, apiPassword, status);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetOpportunityTypesShortlistAsync(string siteCode, string apiID, string apiPassword, int status)
        {
            return base.Channel.GetOpportunityTypesShortlistAsync(siteCode, apiID, apiPassword, status);
        }
        
        public System.Xml.XmlNode GetOpportunityStatusShortlist(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetOpportunityStatusShortlist(siteCode, apiID, apiPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetOpportunityStatusShortlistAsync(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetOpportunityStatusShortlistAsync(siteCode, apiID, apiPassword);
        }
        
        public System.Xml.XmlNode GetBarriersShortlist(string siteCode, string apiID, string apiPassword, int status)
        {
            return base.Channel.GetBarriersShortlist(siteCode, apiID, apiPassword, status);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetBarriersShortlistAsync(string siteCode, string apiID, string apiPassword, int status)
        {
            return base.Channel.GetBarriersShortlistAsync(siteCode, apiID, apiPassword, status);
        }
        
        public System.Xml.XmlNode GetIndustriesShortList(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetIndustriesShortList(siteCode, apiID, apiPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetIndustriesShortListAsync(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetIndustriesShortListAsync(siteCode, apiID, apiPassword);
        }
        
        public System.Xml.XmlNode GetSupportTypesShortList(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetSupportTypesShortList(siteCode, apiID, apiPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetSupportTypesShortListAsync(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetSupportTypesShortListAsync(siteCode, apiID, apiPassword);
        }
        
        public System.Xml.XmlNode GetSupportCaseRaw(string siteCode, string apiID, string apiPassword, int supportCaseID, string supportNo, int employeeID, int customerID, int supportContractID, int supportTypeID, int departmentID, int status)
        {
            return base.Channel.GetSupportCaseRaw(siteCode, apiID, apiPassword, supportCaseID, supportNo, employeeID, customerID, supportContractID, supportTypeID, departmentID, status);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetSupportCaseRawAsync(string siteCode, string apiID, string apiPassword, int supportCaseID, string supportNo, int employeeID, int customerID, int supportContractID, int supportTypeID, int departmentID, int status)
        {
            return base.Channel.GetSupportCaseRawAsync(siteCode, apiID, apiPassword, supportCaseID, supportNo, employeeID, customerID, supportContractID, supportTypeID, departmentID, status);
        }
        
        public System.Xml.XmlNode GetSupportContractRaw(string siteCode, string apiID, string apiPassword, int supportContractID, int employeeID, int customerID, int supportContractTypeID)
        {
            return base.Channel.GetSupportContractRaw(siteCode, apiID, apiPassword, supportContractID, employeeID, customerID, supportContractTypeID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetSupportContractRawAsync(string siteCode, string apiID, string apiPassword, int supportContractID, int employeeID, int customerID, int supportContractTypeID)
        {
            return base.Channel.GetSupportContractRawAsync(siteCode, apiID, apiPassword, supportContractID, employeeID, customerID, supportContractTypeID);
        }
        
        public System.Xml.XmlNode GetSupportJournalRaw(string siteCode, string apiID, string apiPassword, int supportCaseID, int employeeID, int customerID, int supportContractID)
        {
            return base.Channel.GetSupportJournalRaw(siteCode, apiID, apiPassword, supportCaseID, employeeID, customerID, supportContractID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetSupportJournalRawAsync(string siteCode, string apiID, string apiPassword, int supportCaseID, int employeeID, int customerID, int supportContractID)
        {
            return base.Channel.GetSupportJournalRawAsync(siteCode, apiID, apiPassword, supportCaseID, employeeID, customerID, supportContractID);
        }
        
        public System.Xml.XmlNode GetCountriesShortList(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetCountriesShortList(siteCode, apiID, apiPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetCountriesShortListAsync(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetCountriesShortListAsync(siteCode, apiID, apiPassword);
        }
        
        public System.Xml.XmlNode GetEventsRaw(string siteCode, string apiID, string apiPassword, int eventID, int eventTypeID, int customerID, int employeeID, int status, string startDate, string endDate)
        {
            return base.Channel.GetEventsRaw(siteCode, apiID, apiPassword, eventID, eventTypeID, customerID, employeeID, status, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetEventsRawAsync(string siteCode, string apiID, string apiPassword, int eventID, int eventTypeID, int customerID, int employeeID, int status, string startDate, string endDate)
        {
            return base.Channel.GetEventsRawAsync(siteCode, apiID, apiPassword, eventID, eventTypeID, customerID, employeeID, status, startDate, endDate);
        }
        
        public System.Xml.XmlNode GetEventTypesShortlist(string siteCode, string apiID, string apiPassword, int status)
        {
            return base.Channel.GetEventTypesShortlist(siteCode, apiID, apiPassword, status);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetEventTypesShortlistAsync(string siteCode, string apiID, string apiPassword, int status)
        {
            return base.Channel.GetEventTypesShortlistAsync(siteCode, apiID, apiPassword, status);
        }
        
        public System.Xml.XmlNode GetWorkingHoursRaw(string siteCode, string apiID, string apiPassword, int employeeID, int departmentID, int status, string startDate, string endDate)
        {
            return base.Channel.GetWorkingHoursRaw(siteCode, apiID, apiPassword, employeeID, departmentID, status, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetWorkingHoursRawAsync(string siteCode, string apiID, string apiPassword, int employeeID, int departmentID, int status, string startDate, string endDate)
        {
            return base.Channel.GetWorkingHoursRawAsync(siteCode, apiID, apiPassword, employeeID, departmentID, status, startDate, endDate);
        }
        
        public System.Xml.XmlNode GetEmployeeNormalWorkingHoursRaw(string siteCode, string apiID, string apiPassword, int employeeID, int departmentID, int status)
        {
            return base.Channel.GetEmployeeNormalWorkingHoursRaw(siteCode, apiID, apiPassword, employeeID, departmentID, status);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetEmployeeNormalWorkingHoursRawAsync(string siteCode, string apiID, string apiPassword, int employeeID, int departmentID, int status)
        {
            return base.Channel.GetEmployeeNormalWorkingHoursRawAsync(siteCode, apiID, apiPassword, employeeID, departmentID, status);
        }
        
        public bool ValidateCredentials(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.ValidateCredentials(siteCode, apiID, apiPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateCredentialsAsync(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.ValidateCredentialsAsync(siteCode, apiID, apiPassword);
        }
        
        public System.Xml.XmlNode GetContractsRaw(string siteCode, string apiID, string apiPassword, int projectID, int contractModelType)
        {
            return base.Channel.GetContractsRaw(siteCode, apiID, apiPassword, projectID, contractModelType);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetContractsRawAsync(string siteCode, string apiID, string apiPassword, int projectID, int contractModelType)
        {
            return base.Channel.GetContractsRawAsync(siteCode, apiID, apiPassword, projectID, contractModelType);
        }
        
        public System.Xml.XmlNode GetHardBookingsRaw(string siteCode, string apiID, string apiPassword, int employeeUserId, System.DateTime startDate, System.DateTime endDate, int hardbookingType)
        {
            return base.Channel.GetHardBookingsRaw(siteCode, apiID, apiPassword, employeeUserId, startDate, endDate, hardbookingType);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetHardBookingsRawAsync(string siteCode, string apiID, string apiPassword, int employeeUserId, System.DateTime startDate, System.DateTime endDate, int hardbookingType)
        {
            return base.Channel.GetHardBookingsRawAsync(siteCode, apiID, apiPassword, employeeUserId, startDate, endDate, hardbookingType);
        }
        
        public System.Xml.XmlNode GetLegalEntitiesRaw(string siteCode, string apiID, string apiPassword, int status)
        {
            return base.Channel.GetLegalEntitiesRaw(siteCode, apiID, apiPassword, status);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetLegalEntitiesRawAsync(string siteCode, string apiID, string apiPassword, int status)
        {
            return base.Channel.GetLegalEntitiesRawAsync(siteCode, apiID, apiPassword, status);
        }
        
        public System.Xml.XmlNode GetPriceGroupsRaw(string siteCode, string apiID, string apiPassword, int legalEntityId, int customerId)
        {
            return base.Channel.GetPriceGroupsRaw(siteCode, apiID, apiPassword, legalEntityId, customerId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetPriceGroupsRawAsync(string siteCode, string apiID, string apiPassword, int legalEntityId, int customerId)
        {
            return base.Channel.GetPriceGroupsRawAsync(siteCode, apiID, apiPassword, legalEntityId, customerId);
        }
        
        public System.Xml.XmlNode GetHourlyRatesRaw(string siteCode, string apiID, string apiPassword, int CustomerID, int Status)
        {
            return base.Channel.GetHourlyRatesRaw(siteCode, apiID, apiPassword, CustomerID, Status);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetHourlyRatesRawAsync(string siteCode, string apiID, string apiPassword, int CustomerID, int Status)
        {
            return base.Channel.GetHourlyRatesRawAsync(siteCode, apiID, apiPassword, CustomerID, Status);
        }
        
        public System.Xml.XmlNode GetSalaryAccountsRaw(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetSalaryAccountsRaw(siteCode, apiID, apiPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetSalaryAccountsRawAsync(string siteCode, string apiID, string apiPassword)
        {
            return base.Channel.GetSalaryAccountsRawAsync(siteCode, apiID, apiPassword);
        }
        
        public System.Xml.XmlNode GetSalaryAccountEmployeePostingsRaw(string siteCode, string apiID, string apiPassword, int SalaryAccountID, int EmployeeUserID, System.DateTime FromDate, System.DateTime ToDate)
        {
            return base.Channel.GetSalaryAccountEmployeePostingsRaw(siteCode, apiID, apiPassword, SalaryAccountID, EmployeeUserID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetSalaryAccountEmployeePostingsRawAsync(string siteCode, string apiID, string apiPassword, int SalaryAccountID, int EmployeeUserID, System.DateTime FromDate, System.DateTime ToDate)
        {
            return base.Channel.GetSalaryAccountEmployeePostingsRawAsync(siteCode, apiID, apiPassword, SalaryAccountID, EmployeeUserID, FromDate, ToDate);
        }
        
        public System.Xml.XmlNode GetGroupsRaw(string siteCode, string apiID, string apiPassword, int groupID, int typeID, int status)
        {
            return base.Channel.GetGroupsRaw(siteCode, apiID, apiPassword, groupID, typeID, status);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetGroupsRawAsync(string siteCode, string apiID, string apiPassword, int groupID, int typeID, int status)
        {
            return base.Channel.GetGroupsRawAsync(siteCode, apiID, apiPassword, groupID, typeID, status);
        }
        
        public System.Xml.XmlNode GetGroupUnitsRaw(string siteCode, string apiID, string apiPassword, int groupID, int customerID, int contactID, int opportunityID)
        {
            return base.Channel.GetGroupUnitsRaw(siteCode, apiID, apiPassword, groupID, customerID, contactID, opportunityID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetGroupUnitsRawAsync(string siteCode, string apiID, string apiPassword, int groupID, int customerID, int contactID, int opportunityID)
        {
            return base.Channel.GetGroupUnitsRawAsync(siteCode, apiID, apiPassword, groupID, customerID, contactID, opportunityID);
        }
        
        public System.Xml.XmlNode GetEmployeeNormalWorkingTimeHistoriesRaw(string siteCode, string apiID, string apiPassword, int employeeUserID, int employeeStatus)
        {
            return base.Channel.GetEmployeeNormalWorkingTimeHistoriesRaw(siteCode, apiID, apiPassword, employeeUserID, employeeStatus);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetEmployeeNormalWorkingTimeHistoriesRawAsync(string siteCode, string apiID, string apiPassword, int employeeUserID, int employeeStatus)
        {
            return base.Channel.GetEmployeeNormalWorkingTimeHistoriesRawAsync(siteCode, apiID, apiPassword, employeeUserID, employeeStatus);
        }
        
        public System.Xml.XmlNode GetEmployeeManagerHistoriesRaw(string siteCode, string apiID, string apiPassword, int employeeUserID, int employeeStatus)
        {
            return base.Channel.GetEmployeeManagerHistoriesRaw(siteCode, apiID, apiPassword, employeeUserID, employeeStatus);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetEmployeeManagerHistoriesRawAsync(string siteCode, string apiID, string apiPassword, int employeeUserID, int employeeStatus)
        {
            return base.Channel.GetEmployeeManagerHistoriesRawAsync(siteCode, apiID, apiPassword, employeeUserID, employeeStatus);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://app8.timelog.com/610patchreference/service.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://app8.timelog.com/610patchreference/service.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ServiceSoap,
            
            ServiceSoap12,
        }
    }
}

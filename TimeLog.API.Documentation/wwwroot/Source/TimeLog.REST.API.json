{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Timelog Web API version 1",
    "description": ""
  },
  "host": "localhost",
  "basePath": "/tlp/api",
  "schemes": [
    "http"
  ],
  "paths": {
    "/v{version}/absence-code/{status}": {
      "get": {
        "tags": [
          "AbsenceCode"
        ],
        "summary": "Get a list of absence code by status (all, inactive, active)",
        "operationId": "AbsenceCode_GetByStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "An enum of ActiveStatus, can be all(-1), inactive(0) or active(1)",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": -1,
            "enum": [
              0,
              1,
              -1
            ]
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of absence code",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Salary.Models.AbsenceCode.AbsenceCodeApiReadModel"
            }
          },
          "400": {
            "description": "Status specified is invalid",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "500": {
            "description": "Request to GetByStatus has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/absence-code/get-recently-registered": {
      "get": {
        "tags": [
          "AbsenceCode"
        ],
        "summary": "Get a list of absence code that user has registered time on",
        "operationId": "AbsenceCode_GetRecentlyRegistered",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of absence code",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Salary.Models.AbsenceCode.AbsenceCodeApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetRecentlyRegistered has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/absence-code/time-tracker": {
      "post": {
        "tags": [
          "AbsenceCode"
        ],
        "summary": "Create registration of absence with half the normal working time",
        "operationId": "AbsenceCode_CreateTimeTracker",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Contains the type which should be half day (0)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Salary.Models.AbsenceCode.TimeTrackerApiCreateModelForAbsenceCode"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time tracker created"
          },
          "500": {
            "description": "Request to CreateTimeTracker has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/absence-code/registration-by-hours": {
      "post": {
        "tags": [
          "AbsenceCode"
        ],
        "summary": "Create registration of absence with hours",
        "operationId": "AbsenceCode_CreateRegistrationByHours",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Duration of this absence registration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.TimeRegistration.TimeRegistrationApiCreateByHoursModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Absence registration created"
          },
          "500": {
            "description": "Absence registration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/absence-code/registration-by-full-day": {
      "post": {
        "tags": [
          "AbsenceCode"
        ],
        "summary": "Create registration of absence with full normal working time",
        "operationId": "AbsenceCode_CreateRegistrationByFullDay",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.TimeRegistration.TimeRegistrationApiCreateByFullDayModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Absence registration created"
          },
          "500": {
            "description": "Absence registration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/absence-code/registration-by-half-day": {
      "post": {
        "tags": [
          "AbsenceCode"
        ],
        "summary": "Create registration of absence with half/full day.",
        "operationId": "AbsenceCode_CreateRegistrationByHalfFullDay",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.TimeRegistration.TimeRegistrationApiCreateByHalfDayModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Absence registration created"
          },
          "500": {
            "description": "Absence registration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/address/home-work": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "Gets the user Home and Work Addresses.",
        "operationId": "Address_GetHomeAndWork",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Home and Work addresses",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.Address.AddressApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetHomeAndWork has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/address/search": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "Searches the specified search text.",
        "operationId": "Address_Search",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "The project identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of address",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.Address.AddressApiReadModel"
            }
          },
          "500": {
            "description": "Request to Search has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/allowance-legislation": {
      "get": {
        "tags": [
          "AllowanceLegislation"
        ],
        "summary": "Get all allowance legislation",
        "operationId": "AllowanceLegislation_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of allowance legislation",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Salary.Models.AllowanceLegislation.AllowanceLegislationApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/approval/timesheets/get-status-by-week-of-year": {
      "get": {
        "tags": [
          "ApprovalTimesheet"
        ],
        "summary": "Get approval statuses for user",
        "operationId": "ApprovalTimesheet_GetStatusByWeekOfYear",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "employeeUserId",
            "in": "query",
            "description": "The user id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "year",
            "in": "query",
            "description": "The year",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "week",
            "in": "query",
            "description": "Week of year",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of approval status in a week that belongs to the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetPeriodApiReadModel"
            }
          },
          "500": {
            "description": "Unable to retrieve approval status for the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/approval/timesheets/get-status-by-dates": {
      "get": {
        "tags": [
          "ApprovalTimesheet"
        ],
        "summary": "Get approval statuses for user",
        "operationId": "ApprovalTimesheet_GetStatusByDates",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "employeeUserId",
            "in": "query",
            "description": "The user id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "dates",
            "in": "query",
            "description": "List of dates",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of approval status that belongs to the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetWeekDayApiReadModel"
            }
          },
          "500": {
            "description": "Unable to retrieve approval status for the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/approval/timesheets/get-status-by-period": {
      "get": {
        "tags": [
          "ApprovalTimesheet"
        ],
        "summary": "Get approval statuses for user",
        "operationId": "ApprovalTimesheet_GetStatusByPeriod",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "employeeUserId",
            "in": "query",
            "description": "The user id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Period start date",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Period end date",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of approval status within a period that belongs to the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetPeriodApiReadModel"
            }
          },
          "500": {
            "description": "Unable to retrieve approval status for the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/approval/timesheets/get-status-by-period-with-rejected-time-tracking-items": {
      "get": {
        "tags": [
          "ApprovalTimesheet"
        ],
        "summary": "Get approval statuses for user",
        "operationId": "ApprovalTimesheet_GetStatusByPeriodWithRejectedTimeTrackingItems",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "employeeUserId",
            "in": "query",
            "description": "The user id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Period start date",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Period end date",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of approval status within a period that belongs to the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetPeriodApiReadModel"
            }
          },
          "500": {
            "description": "Unable to retrieve approval status for the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/approval/timesheets/get-status-range-by-nearby-week-of-year": {
      "get": {
        "tags": [
          "ApprovalTimesheet"
        ],
        "summary": "Get approval statuses for user",
        "operationId": "ApprovalTimesheet_GetStatusRangeByNearbyWeekOfYear",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "employeeUserId",
            "in": "query",
            "description": "The user id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "year",
            "in": "query",
            "description": "The year",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "week",
            "in": "query",
            "description": "Week of year",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "prevCount",
            "in": "query",
            "description": "Week count to add before",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "nextCount",
            "in": "query",
            "description": "Week count to add after",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of approval status in a week that belongs to the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetPeriodApiReadModel"
            }
          },
          "500": {
            "description": "Unable to retrieve approval status for the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/approval/timesheets/submit-dates": {
      "post": {
        "tags": [
          "ApprovalTimesheet"
        ],
        "summary": "Submit list of days for user",
        "operationId": "ApprovalTimesheet_SubmitDates",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Submit dates model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetSubmitDatesModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheet dates was submitted.",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetWeekDayApiReadModel"
            }
          },
          "500": {
            "description": "Unable to submit Timesheet dates for the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/approval/timesheets/submit-period": {
      "post": {
        "tags": [
          "ApprovalTimesheet"
        ],
        "summary": "Submit range of dates for user",
        "operationId": "ApprovalTimesheet_SubmitPeriod",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Submit period model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetApiSubmitPeriodModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheet period was submitted.",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetWeekDayApiReadModel"
            }
          },
          "500": {
            "description": "Unable to submit Timesheet period for the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/approval/timesheets/submit-time-registrations": {
      "post": {
        "tags": [
          "ApprovalTimesheet"
        ],
        "summary": "Submit time registrations for user",
        "operationId": "ApprovalTimesheet_SubmitTimeRegistrations",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Submit time registrations model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetApiSubmitTimeRegistrationsModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time registrations was submitted.",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetWeekDayApiReadModel"
            }
          },
          "500": {
            "description": "Unable to submit time registrations for the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/approval/timesheets/resubmit-rejected-time-registrations": {
      "post": {
        "tags": [
          "ApprovalTimesheet"
        ],
        "summary": "Resubmit rejected time registrations for user",
        "operationId": "ApprovalTimesheet_ResubmitRejectedTimeRegistrations",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Resubmit rejected time registrations model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetApiSubmitTimeRegistrationsModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Rejected time registrations was submitted.",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetWeekDayApiReadModel"
            }
          },
          "500": {
            "description": "Unable to submit time registrations for the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/barrier": {
      "get": {
        "tags": [
          "Barrier"
        ],
        "summary": "Gets all.",
        "operationId": "Barrier_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Barrier.BarrierApiReadModel"
              }
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Barrier"
        ],
        "summary": "Updates the specified barrier.",
        "operationId": "Barrier_Update",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "barrierApi",
            "in": "body",
            "description": "The barrier.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Barrier.BarrierApiUpdateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Request to Update has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Barrier"
        ],
        "summary": "Saves the specified model.",
        "operationId": "Barrier_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "barrier",
            "in": "body",
            "description": "The barrier.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Barrier.BarrierApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Request to Create has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/barrier/{barrierId}": {
      "get": {
        "tags": [
          "Barrier"
        ],
        "summary": "Gets the by identifier.",
        "operationId": "Barrier_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "barrierId",
            "in": "path",
            "description": "The barrier identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Barrier.BarrierApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetById has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/barrier/{id}": {
      "delete": {
        "tags": [
          "Barrier"
        ],
        "summary": "Deletes the specified barrier identifier.",
        "operationId": "Barrier_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Request to Delete has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/car": {
      "get": {
        "tags": [
          "Car"
        ],
        "summary": "Gets all.",
        "operationId": "Car_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Car.CarApiReadModel"
              }
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Car"
        ],
        "summary": "Updates the specified car API update model.",
        "operationId": "Car_Update",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "carApiUpdateModel",
            "in": "body",
            "description": "The car API update model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Car.CarApiUpdateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Request to Update has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Car"
        ],
        "summary": "Creates the specified car API create model.",
        "operationId": "Car_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The car API create model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Car.CarApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Request to Create has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/car/{id}": {
      "get": {
        "tags": [
          "Car"
        ],
        "summary": "Gets the by identifier.",
        "operationId": "Car_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Car.CarApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetByID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Car"
        ],
        "summary": "Deletes the specified identifier.",
        "operationId": "Car_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Request to Delete has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/car/default": {
      "get": {
        "tags": [
          "Car"
        ],
        "summary": "Gets default car for user.",
        "operationId": "Car_GetDefault",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Car.CarApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetDefault has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/car/{carID}": {
      "get": {
        "tags": [
          "Car"
        ],
        "summary": "Gets the by identifier.",
        "operationId": "Car_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "carID",
            "in": "path",
            "description": "The car identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Car.CarApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetByID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract-hourly-rate": {
      "get": {
        "tags": [
          "ContractHourlyRate"
        ],
        "summary": "Get all contract hourly rates by contract ID",
        "operationId": "ContractHourlyRate_GetAllByContractID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractID",
            "in": "query",
            "description": "Contract ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of contract hourly rates",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Invoicing.Models.ContractHourlyRate.ContractHourlyRateApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAllByContractID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/ContractModel": {
      "get": {
        "tags": [
          "ContractModel"
        ],
        "summary": "Get all customer types",
        "operationId": "ContractModel_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer types",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ContractModel.ContractModelApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/cost-price": {
      "get": {
        "tags": [
          "CostPrice"
        ],
        "summary": "Get all cost prices",
        "operationId": "CostPrice_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cost prices",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Invoicing.Models.CostPrice.CostPriceApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/country/get-all": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get all countries",
        "operationId": "Country_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of countries",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Common.Models.Country.CountryApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/currency/{status}": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Get a list of currency by status (all, inactive, active)",
        "operationId": "Currency_GetByStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "An enum of ActiveStatus, can be all(-1), inactive(0) or active(1)",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": -1,
            "enum": [
              0,
              1,
              -1
            ]
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of currency",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Common.Models.Currency.CurrencyApiReadModel"
            }
          },
          "400": {
            "description": "Status specified is invalid",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "500": {
            "description": "Request to GetByStatus has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/customer": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get all the customers",
        "operationId": "Customer_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/customer/{customerID}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the customer with the customer identifier",
        "operationId": "Customer_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "description": "Customer identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Customer detail",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetByID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/customer/search-for-time-tracking": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Search for customer that the user can register time on, with customer information",
        "operationId": "Customer_SearchForTimeTracking",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "Customer name, customer nickname, or customer number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "If set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTracking has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/customer/search-for-time-tracking-order-by-recent-registration": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Search for customer that the user can register time on, with customer information (Result is ordered by recent registration)",
        "operationId": "Customer_SearchForTimeTrackingOrderByRecentRegistration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "Customer name, customer nickname, or customer number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTrackingOrderByRecentRegistration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/customer/search-for-expense-travel-registration-order-by-recent-registration": {
      "get": {
        "tags": [
          "Customer"
        ],
        "operationId": "Customer_SearchForExpenseTravelRegistrationOrderByRecentRegistration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForExpenseTravelRegistrationOrderByRecentRegistration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/customer/create": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create new customer",
        "operationId": "Customer_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "customer",
            "in": "body",
            "description": "Create customer information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiCreateModel"
            }
          },
          "500": {
            "description": "User could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/customer/validate-new-customer": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Validate new customer",
        "operationId": "Customer_ValidateNewCustomer",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "customer",
            "in": "body",
            "description": "Validate customer information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiCreateModel"
            }
          },
          "500": {
            "description": "User could not be validated",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/customerstatus": {
      "get": {
        "tags": [
          "CustomerStatus"
        ],
        "summary": "Get all customer status",
        "operationId": "CustomerStatus_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer status",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.CustomerStatus.CustomerStatusApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/department": {
      "get": {
        "tags": [
          "Department"
        ],
        "summary": "Get all departments",
        "operationId": "Department_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of departments",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.Department.DepartmentApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/employee-expense": {
      "get": {
        "tags": [
          "EmployeeExpense"
        ],
        "summary": "Get all the employee expenses",
        "operationId": "EmployeeExpense_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "query",
            "description": "User identifier (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of employee expense",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.EmployeeExpense.EmployeeExpenseApiReadModel"
            }
          },
          "500": {
            "description": "Employee expense with the user identifier does not exist",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "EmployeeExpense"
        ],
        "summary": "Update employee expense",
        "operationId": "EmployeeExpense_Update",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "New employee expense information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.EmployeeExpense.EmployeeExpenseApiUpdateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Expense was updated successfully"
          },
          "500": {
            "description": "Expense could not be updated",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "EmployeeExpense"
        ],
        "summary": "Create an employee expense",
        "operationId": "EmployeeExpense_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Expense information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.EmployeeExpense.EmployeeExpenseApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Expense was created successfully"
          },
          "500": {
            "description": "Expense could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/employee-expense/{employeeExpenseID}": {
      "get": {
        "tags": [
          "EmployeeExpense"
        ],
        "summary": "Get the employee expense with the employee expense identifier",
        "operationId": "EmployeeExpense_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "employeeExpenseID",
            "in": "path",
            "description": "Employee expense identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee Expense",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.EmployeeExpense.EmployeeExpenseApiReadModel"
            }
          },
          "500": {
            "description": "Employee expense with the identifier does not exist",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "EmployeeExpense"
        ],
        "summary": "Delete employee expense with the employee expense identifier",
        "operationId": "EmployeeExpense_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "employeeExpenseID",
            "in": "path",
            "description": "Employee expense identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee expense was deleted"
          },
          "500": {
            "description": "Employee expense with the identifier does not exist",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/employee-expense/{employeeExpenseID}/file": {
      "post": {
        "tags": [
          "EmployeeExpense"
        ],
        "summary": "Attach non-image file(s) to an employee expense.",
        "operationId": "EmployeeExpense_AttachFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "employeeExpenseID",
            "in": "path",
            "description": "The employee expense identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully attached the file(s) to the employee expense"
          },
          "500": {
            "description": "Failed to attach the file(s) to the employee expense",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "EmployeeExpense"
        ],
        "summary": "Delete employee expense file(s) with the employee expense identifier and the image url",
        "operationId": "EmployeeExpense_DeleteFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "employeeExpenseID",
            "in": "path",
            "description": "Employee expense identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fileUrl",
            "in": "query",
            "description": "Employee expense file Uri",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee expense file was deleted"
          },
          "500": {
            "description": "Employee expense file with the identifier and file does not exist",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/employee-expense/{employeeExpenseID}/image": {
      "post": {
        "tags": [
          "EmployeeExpense"
        ],
        "summary": "Attach image(s) to an employee expense.",
        "operationId": "EmployeeExpense_AttachImage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "employeeExpenseID",
            "in": "path",
            "description": "The employee expense identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully attach the image(s) to the employee expense"
          },
          "500": {
            "description": "Failed to attach image to the employee expense",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "EmployeeExpense"
        ],
        "summary": "Delete employee expense image with the employee expense identifier and the image url",
        "operationId": "EmployeeExpense_DeleteImage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "employeeExpenseID",
            "in": "path",
            "description": "Employee expense identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "imageUrl",
            "in": "query",
            "description": "Employee expense image Uri",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee expense image was deleted"
          },
          "500": {
            "description": "Employee expense image with the identifier and image does not exist",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/employee-expense-financial-data/get-by-date": {
      "get": {
        "tags": [
          "EmployeeExpenseFinancialData"
        ],
        "summary": "Get the employee expense financial data information of the user by the given date",
        "operationId": "EmployeeExpenseFinancialData_GetByDate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date to select",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee expense financial data",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.EmployeeExpenseFinancialData.EmployeeExpenseFinancialDataApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetByDate has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/employee-expense-financial-data/get-by-date-range": {
      "get": {
        "tags": [
          "EmployeeExpenseFinancialData"
        ],
        "summary": "Get a list of employee expense financial data information of the user by the given period",
        "operationId": "EmployeeExpenseFinancialData_GetByDateRange",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start of the period",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End of the period",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of employee expense financial data",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.EmployeeExpenseFinancialData.EmployeeExpenseFinancialDataApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetByDateRange has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/employee-projection/get-in-period": {
      "get": {
        "tags": [
          "EmployeeProjection"
        ],
        "summary": "Get a list of employee projection in the period",
        "operationId": "EmployeeProjection_GetInPeriod",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start of the period",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End of the period",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of employee projection",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.EmployeeProjection.EmployeeProjectionApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetInPeriod has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/employee-type": {
      "get": {
        "tags": [
          "EmployeeType"
        ],
        "summary": "Get all employee types",
        "operationId": "EmployeeType_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of employee types",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.EmployeeType.EmployeeTypeApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/expense-type/{status}": {
      "get": {
        "tags": [
          "ExpenseType"
        ],
        "summary": "Get a list of expense type by status (all, inactive, active)",
        "operationId": "ExpenseType_GetByStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "An enum of ActiveStatus, can be all(-1), inactive(0) or active(1)",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": -1,
            "enum": [
              0,
              1,
              -1
            ]
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of expense type",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.ExpenseType.ExpenseTypeApiReadModel"
            }
          },
          "400": {
            "description": "Status specified is invalid",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "500": {
            "description": "Request to GetByStatus has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/feature": {
      "put": {
        "tags": [
          "Feature"
        ],
        "summary": "Updates the specified model.",
        "operationId": "Feature_Update",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Feature.FeatureApiUpdateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Request to Update has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/holiday-calendar": {
      "get": {
        "tags": [
          "HolidayCalendar"
        ],
        "summary": "Get all holiday calendars",
        "operationId": "HolidayCalendar_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of holiday calendars",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Salary.Models.HolidayCalendar.HolidayCalendarApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/hourly-rate": {
      "get": {
        "tags": [
          "HourlyRate"
        ],
        "summary": "Get all hourly rates",
        "operationId": "HourlyRate_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of hourly rates",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Invoicing.Models.HourlyRate.HourlyRateApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/hourly-rate/default": {
      "get": {
        "tags": [
          "HourlyRate"
        ],
        "summary": "Get all hourly rates",
        "operationId": "HourlyRate_GetDefaultHourlyRates",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of default hourly rates",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Invoicing.Models.HourlyRate.HourlyRateApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetDefaultHourlyRates has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}": {
      "get": {
        "tags": [
          "Index"
        ],
        "summary": "Indexes this instance.",
        "operationId": "Index_Index",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Request to Index has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/industry/get-all": {
      "get": {
        "tags": [
          "Industry"
        ],
        "summary": "Get all industries",
        "operationId": "Industry_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of industries",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.Industry.IndustryApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/legal-entity": {
      "get": {
        "tags": [
          "LegalEntity"
        ],
        "summary": "Get all legal entities",
        "operationId": "LegalEntity_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of legal entities",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.LegalEntity.LegalEntityApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/mileage-rate": {
      "get": {
        "tags": [
          "MileageRate"
        ],
        "summary": "Gets all mileage rate for user.",
        "operationId": "MileageRate_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of mileage rates belong to the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRate.MileageRateApiReadModel"
            }
          },
          "500": {
            "description": "Unable to retrieve MileageRates for the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/mileage-rate/{mileageRateID}": {
      "get": {
        "tags": [
          "MileageRate"
        ],
        "summary": "Gets the by identifier.",
        "operationId": "MileageRate_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "mileageRateID",
            "in": "path",
            "description": "The time registration identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A mileage rate",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRate.MileageRateApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetByID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/mileage-registration": {
      "get": {
        "tags": [
          "MileageRegistration"
        ],
        "summary": "Get all mileage registration for the user",
        "operationId": "MileageRegistration_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of mileage registration belong to the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRegistration.MileageRegistrationApiReadModel"
            }
          },
          "500": {
            "description": "Unable to retrieve MileageRegistrations for the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "MileageRegistration"
        ],
        "summary": "Update an existing mileage registration",
        "operationId": "MileageRegistration_Update",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRegistration.MileageRegistrationApiUpdateModel"
            }
          },
          {
            "name": "deleteTravelTimeRegistration",
            "in": "query",
            "description": "Travel time registration delete flag",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Mileage registration was updated successfully",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRegistration.MileageRegistrationApiReadModel"
            }
          },
          "500": {
            "description": "Failed to update the mileage registration",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "MileageRegistration"
        ],
        "summary": "Create a new mileage registration",
        "operationId": "MileageRegistration_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRegistration.MileageRegistrationApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Mileage registration was created successfully",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRegistration.MileageRegistrationApiReadModel"
            }
          },
          "500": {
            "description": "Failed to create the mileage registration",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/mileage-registration/{mileageRegistrationID}": {
      "get": {
        "tags": [
          "MileageRegistration"
        ],
        "summary": "Get a Mileage Registration with its identifier",
        "operationId": "MileageRegistration_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "mileageRegistrationID",
            "in": "path",
            "description": "Mileage registration identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A mileage registration",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRegistration.MileageRegistrationApiReadModel"
            }
          },
          "500": {
            "description": "MileageRegistration with the MileageRegistrationID provided does not exist",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "MileageRegistration"
        ],
        "summary": "Delete mileage registration using the mileage registration identifier",
        "operationId": "MileageRegistration_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "mileageRegistrationID",
            "in": "path",
            "description": "The identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ignoreTravelTimeRegistration",
            "in": "query",
            "description": "Travel time registration delete flag",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "MileageRegistration was deleted"
          },
          "500": {
            "description": "MileageRegistration could not be deleted",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/normal-working-time": {
      "get": {
        "tags": [
          "NormalWorkingTime"
        ],
        "summary": "Get all normal working time",
        "operationId": "NormalWorkingTime_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of normal working times",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.NormalWorkingTime.NormalWorkingTimeApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/payment/{paymentID}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get payment by payment ID",
        "operationId": "Payment_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "paymentID",
            "in": "path",
            "description": "Payment ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A payment",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Payment.PaymentApiReadModel"
            }
          },
          "500": {
            "description": "Payment with the ID does not exist",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/payment": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get all payments by contract ID",
        "operationId": "Payment_GetAllByContractID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractID",
            "in": "query",
            "description": "Contract ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of payments",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Payment.PaymentApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAllByContractID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Create payment for contract",
        "operationId": "Payment_CreatePayment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "createModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Payment.PaymentApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment was created successfully"
          },
          "500": {
            "description": "Payment could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/payment/validate-new-payment": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Create payment for contract",
        "operationId": "Payment_ValidateNewPayment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "createModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Payment.PaymentApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment was validated successfully"
          },
          "500": {
            "description": "Payment could not be validated",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/payment-method/{status}": {
      "get": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Get a list of payment method belonging to the user by status (all, inactive, active)",
        "operationId": "PaymentMethod_GetByStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "An enum of ActiveStatus, can be all(-1), inactive(0) or active(1)",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": -1,
            "enum": [
              0,
              1,
              -1
            ]
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of payment method",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.PaymentMethod.PaymentMethodApiReadModel"
            }
          },
          "400": {
            "description": "Status specified is invalid",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "500": {
            "description": "Request to GetByStatus has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/payment-term": {
      "get": {
        "tags": [
          "PaymentTerm"
        ],
        "summary": "Get all payment terms",
        "operationId": "PaymentTerm_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of payment terms",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Invoicing.Models.PaymentTerm.PaymentTermApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/product": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get all products",
        "operationId": "Product_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of products",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.Product.ProductApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project/{projectID}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get a project by the project identifier",
        "operationId": "Project_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "projectID",
            "in": "path",
            "description": "Project identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A project",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Project.ProjectApiReadModel"
            }
          },
          "500": {
            "description": "Project with the identifier does not exist",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project/get-all": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get all projects",
        "operationId": "Project_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "query",
            "description": "Customer identifier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Project active status. Default true",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of projects",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Project.ProjectApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project/create-from-template": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create new project",
        "operationId": "Project_CreateFromTemplate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "body",
            "description": "Create project information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Project.ProjectApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Project is created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Project.ProjectApiCreateModel"
            }
          },
          "500": {
            "description": "Project could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project/validate-create-from-template": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Validate new customer",
        "operationId": "Project_ValidateNewProject",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Project.ProjectApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Project.ProjectApiCreateModel"
            }
          },
          "500": {
            "description": "Project could not be validated",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/ProjectCategory": {
      "get": {
        "tags": [
          "ProjectCategory"
        ],
        "summary": "Get all project categories",
        "operationId": "ProjectCategory_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project categories",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectCategory.ProjectCategoryApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-expense/{expenseID}": {
      "get": {
        "tags": [
          "ProjectExpense"
        ],
        "summary": "Get project expense by expense ID",
        "operationId": "ProjectExpense_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "expenseID",
            "in": "path",
            "description": "Expense ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A project expense",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.ProjectExpense.ProjectExpenseApiReadModel"
            }
          },
          "500": {
            "description": "Project expense with the ID does not exist",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-expense": {
      "get": {
        "tags": [
          "ProjectExpense"
        ],
        "summary": "Get all project expenses by project ID",
        "operationId": "ProjectExpense_GetAllByProjectID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "projectID",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project expenses",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.ProjectExpense.ProjectExpenseApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAllByProjectID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectExpense"
        ],
        "summary": "Create project expense for project",
        "operationId": "ProjectExpense_CreateProjectExpense",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "createModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.ProjectExpense.ProjectExpenseApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Project expense was created successfully"
          },
          "500": {
            "description": "Project expense could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-expense/validate-project-expense": {
      "post": {
        "tags": [
          "ProjectExpense"
        ],
        "summary": "Validate project expense for project",
        "operationId": "ProjectExpense_ValidateProjectExpense",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "createModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.ProjectExpense.ProjectExpenseApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Project expense was validated successfully"
          },
          "500": {
            "description": "Project expense could not be validated",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-header/search-for-time-tracking": {
      "get": {
        "tags": [
          "ProjectHeader"
        ],
        "summary": "Search for project that the user can register time on, with the project information",
        "operationId": "ProjectHeader_SearchForTimeTracking",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "Project name or project number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "If set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project header",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectHeader.ProjectHeaderApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTracking has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-header/search-for-time-tracking-order-by-recent-registration": {
      "get": {
        "tags": [
          "ProjectHeader"
        ],
        "summary": "Search for project that the user can register time on (Result is ordered by recent registration)",
        "operationId": "ProjectHeader_SearchForTimeTrackingOrderByRecentRegistration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "Project name or project number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project header",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectHeader.ProjectHeaderApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTrackingOrderByRecentRegistration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-header/search-for-time-tracking-by-customer-id": {
      "get": {
        "tags": [
          "ProjectHeader"
        ],
        "summary": "Search for project that the user can register time on, that belongs to a customer",
        "operationId": "ProjectHeader_SearchForTimeTrackingByCustomerID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "query",
            "description": "Customer identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Search string",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project header",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectHeader.ProjectHeaderApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTrackingByCustomerID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-header/search-for-expense-travel-registration-order-by-recent-registration": {
      "get": {
        "tags": [
          "ProjectHeader"
        ],
        "summary": "Search for project that the user can register expense or travel on, with the project information",
        "operationId": "ProjectHeader_SearchForExpenseTravelRegistrationOrderByRecentRegistration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "Project name or project number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "If set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project header",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectHeader.ProjectHeaderApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForExpenseTravelRegistrationOrderByRecentRegistration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-header/search-for-time-tracking-by-customer-id-order-by-recent-registration": {
      "get": {
        "tags": [
          "ProjectHeader"
        ],
        "summary": "Search for project that the user can register time on, that belongs to a customer (Result is ordered by recent registration)",
        "operationId": "ProjectHeader_SearchForTimeTrackingByCustomerIDOrderByRecentRegistration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "query",
            "description": "Customer identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Search string",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project header",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectHeader.ProjectHeaderApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTrackingByCustomerIDOrderByRecentRegistration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-header/search-for-expense-travel-registration-by-customer-id-order-by-recent-registration": {
      "get": {
        "tags": [
          "ProjectHeader"
        ],
        "summary": "Search for project that the user can register expense or travel on, that belongs to a customer (Result is ordered by recent registration)",
        "operationId": "ProjectHeader_SearchForExpenseTravelRegistrationByCustomerIDOrderByRecentRegistration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "query",
            "description": "Customer identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Search string",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "If set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project header",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectHeader.ProjectHeaderApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForExpenseTravelRegistrationByCustomerIDOrderByRecentRegistration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-header/employee-expense": {
      "post": {
        "tags": [
          "ProjectHeader"
        ],
        "summary": "Creates the employee expense.",
        "operationId": "ProjectHeader_CreateEmployeeExpense",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.EmployeeExpense.EmployeeExpenseApiCreateModelForProject"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee expense was created created successfully"
          },
          "500": {
            "description": "Employee expense could not be created for the project",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-header/mileage-registration": {
      "post": {
        "tags": [
          "ProjectHeader"
        ],
        "summary": "Create a new mileage registration for the project",
        "operationId": "ProjectHeader_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.MileageRegistration.MileageRegistrationApiCreateModelForProject"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Mileage registration was created successfully",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRegistration.MileageRegistrationApiReadModel"
            }
          },
          "500": {
            "description": "Failed to create the mileage registration",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-product": {
      "get": {
        "tags": [
          "ProjectProduct"
        ],
        "summary": "Get all project products",
        "operationId": "ProjectProduct_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project products",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.ProjectProduct.ProjectProductApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract/{contractID}": {
      "get": {
        "tags": [
          "ProjectSubContract"
        ],
        "summary": "Get a contract by contract ID",
        "operationId": "ProjectSubContract_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractID",
            "in": "path",
            "description": "Contract ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A contract",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.ProjectSubContractApiReadModel"
            }
          },
          "500": {
            "description": "Contract with the ID does not exist",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract": {
      "get": {
        "tags": [
          "ProjectSubContract"
        ],
        "summary": "Get all contracts by project ID",
        "operationId": "ProjectSubContract_GetAllByProjectID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "projectID",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of contracts",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.ProjectSubContractApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAllByProjectID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract/create-prepaid-services-contract": {
      "post": {
        "tags": [
          "ProjectSubContract"
        ],
        "summary": "Create Prepaid Services contract for a specified project",
        "operationId": "ProjectSubContract_PrepaidServicesContractCreate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.PrepaidServicesContractApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract was created successfully"
          },
          "500": {
            "description": "Contract could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract/create-fixed-price-basic-contract": {
      "post": {
        "tags": [
          "ProjectSubContract"
        ],
        "summary": "Create Fixed Price Basic contract for a specified project",
        "operationId": "ProjectSubContract_FixedPriceBasicContractCreate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.FixedPriceBasicContractApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract was created successfully"
          },
          "500": {
            "description": "Contract could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract/validate-prepaid-services-contract": {
      "post": {
        "tags": [
          "ProjectSubContract"
        ],
        "summary": "Create Prepaid Services contract for a specified project",
        "operationId": "ProjectSubContract_PrepaidServicesContractValidate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.PrepaidServicesContractApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract was validated successfully"
          },
          "500": {
            "description": "Contract could not be validated",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract/create-task-driven-revenue-contract": {
      "post": {
        "tags": [
          "ProjectSubContract"
        ],
        "summary": "Create Task Driven Revenue contract for a specified project",
        "operationId": "ProjectSubContract_TaskDrivenRevenueContractCreate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.TaskDrivenRevenueContractApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract was created successfully"
          },
          "500": {
            "description": "Contract could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract/create-time-material-basic-contract": {
      "post": {
        "tags": [
          "ProjectSubContract"
        ],
        "summary": "Create Time and Material Basic contract for a specified project",
        "operationId": "ProjectSubContract_TimeMaterialBasicContractCreate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.TimeMaterialBasicContractApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract was created successfully"
          },
          "500": {
            "description": "Contract could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract/validate-fixed-price-basic-contract": {
      "post": {
        "tags": [
          "ProjectSubContract"
        ],
        "summary": "Create Fixed Price Basic contract for a specified project",
        "operationId": "ProjectSubContract_FixedPriceBasicContractValidate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.FixedPriceBasicContractApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract was validated successfully"
          },
          "500": {
            "description": "Contract could not be validated",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract/validate-task-driven-revenue-contract": {
      "post": {
        "tags": [
          "ProjectSubContract"
        ],
        "summary": "Create Task Driven Revenue contract for a specified project",
        "operationId": "ProjectSubContract_TaskDrivenRevenueContractValidate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.TaskDrivenRevenueContractApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract was validated successfully"
          },
          "500": {
            "description": "Contract could not be validated",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract/validate-time-material-basic-contract": {
      "post": {
        "tags": [
          "ProjectSubContract"
        ],
        "summary": "Validate Time and Material Basic contract for a specified project",
        "operationId": "ProjectSubContract_TimeMaterialBasicContractValidate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.TimeMaterialBasicContractApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract was validated successfully"
          },
          "500": {
            "description": "Contract could not be validated",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract/create-time-material-account-end-balancing-contract": {
      "post": {
        "tags": [
          "ProjectSubContract"
        ],
        "summary": "Create Time and Material Account with End Balancing contract for a specified project",
        "operationId": "ProjectSubContract_TimeMaterialAccountEndBalancingContractCreate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.TimeMaterialAccountEndBalancingContractApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract was created successfully"
          },
          "500": {
            "description": "Contract could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/contract/validate-time-material-account-end-balancing-contract": {
      "post": {
        "tags": [
          "ProjectSubContract"
        ],
        "summary": "Create Time and Material Account with End Balancing contract for a specified project",
        "operationId": "ProjectSubContract_TimeMaterialAccountEndBalancingContractValidate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "contractModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.TimeMaterialAccountEndBalancingContractApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract was validated successfully"
          },
          "500": {
            "description": "Contract could not be validated",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/project-template/get-all": {
      "get": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Get all project templates",
        "operationId": "ProjectTemplate_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project templates",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectTemplate.ProjectTemplateApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/ProjectType": {
      "get": {
        "tags": [
          "ProjectType"
        ],
        "summary": "Get all project types",
        "operationId": "ProjectType_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of project types",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectType.ProjectTypeApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/role": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Get all roles",
        "operationId": "Role_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of roles",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Security.Models.RoleApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Role"
        ],
        "summary": "Creates the specified model.",
        "operationId": "Role_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Security.Models.RoleApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Request to Create has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Deletes the specified model.",
        "operationId": "Role_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "query",
            "description": "The role identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "areaPrivilegeGUID",
            "in": "query",
            "description": "The area privilege unique identifier.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "eventTypeGroupGUID",
            "in": "query",
            "description": "The event type group unique identifier.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Request to Delete has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/salary-group": {
      "get": {
        "tags": [
          "SalaryGroup"
        ],
        "summary": "Get all salary groups",
        "operationId": "SalaryGroup_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of salary groups",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Salary.Models.SalaryGroup.SalaryGroupApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/setting": {
      "put": {
        "tags": [
          "Setting"
        ],
        "summary": "Updates the specified model.",
        "operationId": "Setting_Update",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Setting.SettingApiUpdateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Request to Update has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/{taskID}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get a task with the task identifier",
        "operationId": "Task_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "description": "Task identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Task with the TaskID provided does not exist",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get a list of all tasks by project identifier, that belongs to a project",
        "operationId": "Task_GetAllByProjectID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "projectID",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tasks",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAllByProjectID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create task on a specified project",
        "operationId": "Task_CreateTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "taskModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Task was created successfully"
          },
          "500": {
            "description": "Task could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/get-recently-registered": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get a list of task that the user has registered time on",
        "operationId": "Task_GetRecentlyRegistered",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of task",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetRecentlyRegistered has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/travel-time-task-for-time-tracking": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get a list of all travel time tasks by project identifier, that belongs to a project",
        "operationId": "Task_GetTravelTimeTaskForTimeTrackingByProjectID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "projectID",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tasks",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetTravelTimeTaskForTimeTrackingByProjectID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/search-by-project": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Search for task that the user can register time on, that belongs to a project",
        "operationId": "Task_SearchByProject",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "Project name or project number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of task",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchByProject has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/search-by-customer": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Search for task that the user can register time on, that belongs to the customer",
        "operationId": "Task_SearchByCustomer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "Customer name, customer nickname or customer number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of task",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchByCustomer has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/search-for-time-tracking": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Search for task that the user can register time on, with the task information",
        "operationId": "Task_SearchForTimeTracking",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "Task name or task number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of task",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTracking has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/search-for-time-tracking-order-by-recent-registration": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Search for task that the user can register time on, with the task information (Result is ordered by recent registration)",
        "operationId": "Task_SearchForTimeTrackingOrderByRecentRegistration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "Task name or task number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of task",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTrackingOrderByRecentRegistration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/search-for-time-tracking-by-project-id": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Search for task that the user can register time on, that belongs to a project",
        "operationId": "Task_SearchForTimeTrackingByProjectID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "projectID",
            "in": "query",
            "description": "Project identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Task name or task number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of task",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTrackingByProjectID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/search-for-time-tracking-by-customer-id": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Search for task that the user can register time on, that belongs to a customer",
        "operationId": "Task_SearchForTimeTrackingByCustomerID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "query",
            "description": "Customer identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Task name or task number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of task",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTrackingByCustomerID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/search-for-time-tracking-by-project-id-order-by-travel-time-task": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Search for task that the user can register time on, that belongs to a project (Result is ordered by travel time task)",
        "operationId": "Task_SearchForTimeTrackingByProjectIdOrderByTravelTimeTask",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "projectID",
            "in": "query",
            "description": "Project identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Task name or task number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of task",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTrackingByProjectIdOrderByTravelTimeTask has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/search-for-time-tracking-by-project-id-order-by-recent-registration": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Search for task that the user can register time on, that belongs to a project (Result is ordered by recent registration)",
        "operationId": "Task_SearchForTimeTrackingByProjectIDOrderByRecentRegistration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "projectID",
            "in": "query",
            "description": "Project identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Task name or task number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of task",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTrackingByProjectIDOrderByRecentRegistration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/search-for-time-tracking-by-customer-id-order-by-recent-registration": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Search for task that the user can register time on, that belongs to a customer (Result is ordered by recent registration)",
        "operationId": "Task_SearchForTimeTrackingByCustomerIDOrderByRecentRegistration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "query",
            "description": "Customer identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Task name or task number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "searchAll",
            "in": "query",
            "description": "if set to true [search all].",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of task",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel"
            }
          },
          "500": {
            "description": "Request to SearchForTimeTrackingByCustomerIDOrderByRecentRegistration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/registration": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create registration with task and hour",
        "operationId": "Task_CreateRegistration",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.TimeRegistration.TimeRegistrationApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Registration was created successfully"
          },
          "500": {
            "description": "Registration could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/create-sub-task": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create sub task on an existing task of a specified project",
        "operationId": "Task_CreateSubTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "taskModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Sub task was created successfully"
          },
          "500": {
            "description": "Sub task could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/task/validate-new-task": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Validate if a new task can be created",
        "operationId": "Task_ValidateNewTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "taskModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Validate if new task can be created successfully"
          },
          "500": {
            "description": "Task validation failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/TaskType": {
      "get": {
        "tags": [
          "TaskType"
        ],
        "summary": "Get all task types",
        "operationId": "TaskType_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of task types",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.TaskType.TaskTypeApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration/{timeRegistrationID}": {
      "get": {
        "tags": [
          "TimeRegistration"
        ],
        "summary": "Get time registration with the time registration identifier",
        "operationId": "TimeRegistration_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeRegistrationID",
            "in": "path",
            "description": "Time registration identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "No time registration with the identifier was found",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "500": {
            "description": "Request to GetByID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration": {
      "put": {
        "tags": [
          "TimeRegistration"
        ],
        "summary": "Update time registration",
        "operationId": "TimeRegistration_Update",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeRegistrationApiUpdateModel",
            "in": "body",
            "description": "The registration that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiUpdateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time registration was updated"
          },
          "500": {
            "description": "Time registration could not be updated",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "TimeRegistration"
        ],
        "summary": "Create time registration.",
        "operationId": "TimeRegistration_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeRegistrationApiCreateModel",
            "in": "body",
            "description": "The time registration API create model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time registration was created"
          },
          "500": {
            "description": "Time registration could not be created"
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration/import": {
      "post": {
        "tags": [
          "TimeRegistration"
        ],
        "summary": "Import time registration.",
        "operationId": "TimeRegistration_ImportTimeregistration",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeRegistrationImportApiCreateModel",
            "in": "body",
            "description": "The time registration import API create model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationImportApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time registration was created from import"
          },
          "500": {
            "description": "Time registration could not be imported"
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration/update-time": {
      "post": {
        "tags": [
          "TimeRegistration"
        ],
        "summary": "Update existing time registration",
        "operationId": "TimeRegistration_UpdateTime",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "New time information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiUpdateTimeModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time registration was updated successfully"
          },
          "500": {
            "description": "Time registration does not exist"
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration/time-tracker": {
      "post": {
        "tags": [
          "TimeRegistration"
        ],
        "summary": "Creates the time tracker.",
        "operationId": "TimeRegistration_CreateTimeTracker",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiCreateModelForRegistration"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time tracker created for this registration"
          },
          "500": {
            "description": "Request to CreateTimeTracker has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration/validate-import": {
      "post": {
        "tags": [
          "TimeRegistration"
        ],
        "summary": "Import time registration.",
        "operationId": "TimeRegistration_ValidateImportTimeregistration",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeRegistrationImportApiCreateModel",
            "in": "body",
            "description": "The time registration import API create model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationImportApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time registration was validated from import"
          },
          "500": {
            "description": "Time registration could not be validated"
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration/update-hours-absence": {
      "post": {
        "tags": [
          "TimeRegistration"
        ],
        "summary": "Update hours for absence registration",
        "operationId": "TimeRegistration_UpdateHoursAbsence",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "New hour information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiUpdateHoursAbsenceModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Absence registration was updated"
          },
          "500": {
            "description": "Time registration does not exist"
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration/update-full-day-absence": {
      "post": {
        "tags": [
          "TimeRegistration"
        ],
        "summary": "Update absence registration with full day normal working time",
        "operationId": "TimeRegistration_UpdateFullDayAbsence",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiUpdateFullDayAbsenceModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Absence registration was updated"
          },
          "500": {
            "description": "Time registration does not exist"
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration/update-half-or-full-day-absence": {
      "post": {
        "tags": [
          "TimeRegistration"
        ],
        "summary": "Update absence registration with full day or half day normal working time",
        "operationId": "TimeRegistration_UpdateHalfOrFullDaysAbsence",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiUpdateHalfOrFullDaysAbsenceModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Absence registration was updated"
          },
          "500": {
            "description": "Time registration does not exist"
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration/stop-time-tracker/{timeTrackerId}": {
      "post": {
        "tags": [
          "TimeRegistration"
        ],
        "summary": "Stop the time tracker.",
        "operationId": "TimeRegistration_StopTimeTracker",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeTrackerId",
            "in": "path",
            "description": "The time tracker identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiUpdateModelBase"
            }
          },
          "500": {
            "description": "Request to StopTimeTracker has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration/{id}": {
      "delete": {
        "tags": [
          "TimeRegistration"
        ],
        "summary": "Delete time registration with the GUID",
        "operationId": "TimeRegistration_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "GUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time registration was deleted"
          },
          "500": {
            "description": "Time registration does not exist"
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration-financial-data/get-by-date": {
      "get": {
        "tags": [
          "TimeRegistrationFinancialData"
        ],
        "summary": "Get the financial data information of the user by the given date",
        "operationId": "TimeRegistrationFinancialData_GetByDate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date to select",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time registration financial data",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistrationFinancialData.TimeRegistrationFinancialDataApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetByDate has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration-financial-data/get-status-by-date": {
      "get": {
        "tags": [
          "TimeRegistrationFinancialData"
        ],
        "summary": "Get the financial data processing status by the given date",
        "operationId": "TimeRegistrationFinancialData_GetStatusByDate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date to select",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time registration financial data processing status",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistrationFinancialData.TimeRegistrationFinancialDataStatusApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetStatusByDate has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration-financial-data/get-by-date-range": {
      "get": {
        "tags": [
          "TimeRegistrationFinancialData"
        ],
        "summary": "Get a list of financial data information of the user by the given period",
        "operationId": "TimeRegistrationFinancialData_GetByDateRange",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start of the period",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End of the period",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of time registration financial data",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistrationFinancialData.TimeRegistrationFinancialDataApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetByDateRange has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-registration-financial-data/get-status-by-date-range": {
      "get": {
        "tags": [
          "TimeRegistrationFinancialData"
        ],
        "summary": "Get a list of financial data processing statuses by the given period",
        "operationId": "TimeRegistrationFinancialData_GetStatusByDateRange",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start of the period",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End of the period",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of time registration financial data processing statuses",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistrationFinancialData.TimeRegistrationFinancialDataStatusApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetStatusByDateRange has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-tracker": {
      "get": {
        "tags": [
          "TimeTracker"
        ],
        "summary": "Gets all.",
        "operationId": "TimeTracker_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "TimeTracker"
        ],
        "summary": "Updates the specified time tracker API update model detail.",
        "operationId": "TimeTracker_Update",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeTrackerApiUpdateModelDetail",
            "in": "body",
            "description": "The time tracker API update model detail.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiUpdateModelDetail"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiUpdateModelDetail"
            }
          },
          "500": {
            "description": "Request to Update has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "TimeTracker"
        ],
        "summary": "Creates the specified time tracker API create model.",
        "operationId": "TimeTracker_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeTrackerApiCreateModel",
            "in": "body",
            "description": "The time tracker API create model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiCreateModelBase"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiCreateModelBase"
            }
          },
          "500": {
            "description": "Request to Create has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-tracker/{timeTrackerID}": {
      "get": {
        "tags": [
          "TimeTracker"
        ],
        "summary": "Gets the by identifier.",
        "operationId": "TimeTracker_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeTrackerID",
            "in": "path",
            "description": "The time tracker identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetByID has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "TimeTracker"
        ],
        "summary": "Delete the specified time tracker identifier.",
        "operationId": "TimeTracker_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeTrackerID",
            "in": "path",
            "description": "The time tracker identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Request to Delete has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-tracker/active-time-tracker": {
      "get": {
        "tags": [
          "TimeTracker"
        ],
        "summary": "Gets the user active time tracking.",
        "operationId": "TimeTracker_GetUserActiveTimeTracking",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetUserActiveTimeTracking has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-tracker/task/start-time-tracker": {
      "post": {
        "tags": [
          "TimeTracker"
        ],
        "summary": "Start the time tracker for task.",
        "operationId": "TimeTracker_StartTimeTrackerForTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.TimeTracker.TimeTrackerApiCreateModelForTask"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time tracker started"
          },
          "500": {
            "description": "Request to StartTimeTrackerForTask has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-tracker/absence/start-time-tracker": {
      "post": {
        "tags": [
          "TimeTracker"
        ],
        "summary": "Start the time tracker for absence.",
        "operationId": "TimeTracker_StartTimeTrackerForAbsence",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Salary.Models.AbsenceCode.TimeTrackerApiCreateModelForAbsenceCode"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Time tracker started"
          },
          "500": {
            "description": "Request to StartTimeTrackerForAbsence has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-tracking-item/{timeRegistrationID}": {
      "get": {
        "tags": [
          "TimeTrackingItem"
        ],
        "summary": "Get the time tracking item by the time registration identifier",
        "operationId": "TimeTrackingItem_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeRegistrationID",
            "in": "path",
            "description": "Time registration identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A time tracking item",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Registration.Models.TimeTrackingItem.TimeTrackingItemApiReadModel"
            }
          },
          "500": {
            "description": "No time tracking item matching the identifier is found",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-tracking-item/get-by-date": {
      "get": {
        "tags": [
          "TimeTrackingItem"
        ],
        "summary": "Get a list of time tracking item by the given period",
        "operationId": "TimeTrackingItem_GetByDate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start of the period",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End of the period",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of time tracking item",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Registration.Models.TimeTrackingItem.TimeTrackingItemApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetByDate has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/time-tracking-item/get-by-date-order-by-recent-registration": {
      "get": {
        "tags": [
          "TimeTrackingItem"
        ],
        "summary": "Get a list of time tracking item by the given period, ordered by recent registration",
        "operationId": "TimeTrackingItem_GetByDateOrderByRecentRegistration",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start of the period",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End of the period",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of time tracking item",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Registration.Models.TimeTrackingItem.TimeTrackingItemApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetByDateOrderByRecentRegistration has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/unit-type": {
      "get": {
        "tags": [
          "UnitType"
        ],
        "summary": "Get all customer types",
        "operationId": "UnitType_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer types",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Common.Models.UnitType.UnitTypeApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of all users in the organization",
        "operationId": "User_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user information",
        "operationId": "User_Update",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "Update user information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserUpdateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Request to Update has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/user/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the current user information",
        "operationId": "User_GetCurrentUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetCurrentUser has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a user with the user identifier",
        "operationId": "User_GetByID",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserApiReadModel"
            }
          },
          "500": {
            "description": "No user matching the identifier was found",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/user/create": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create new user",
        "operationId": "User_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "Create user information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserApiCreateModel"
            }
          },
          "500": {
            "description": "User could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/user/validate-new-user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Validate new user",
        "operationId": "User_ValidateNewUser",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "Validate user information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserApiCreateModel"
            }
          },
          "500": {
            "description": "User could not be validated",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/user-preview-feature": {
      "get": {
        "tags": [
          "UserPreviewFeature"
        ],
        "summary": "Gets all active preview feature for user.",
        "operationId": "UserPreviewFeature_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of preview features belonging to the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.PreviewFeature.Models.UserPreviewFeatureValueApiReadModel"
            }
          },
          "500": {
            "description": "Unable to retrieve PreviewFeatures for the user",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/user-setting": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Get user settings such as BillableHourIsEditable",
        "operationId": "UserSetting_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of User Settings that is defined by the system admin",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Common.Models.UserSetting.UserSettingApiReadModel"
            }
          },
          "500": {
            "description": "Request to GetAll has failed",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v{version}/workload/book": {
      "post": {
        "tags": [
          "Workload"
        ],
        "summary": "Books a workload",
        "operationId": "Workload_BookWorkload",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Workload.WorkloadApiCreateModel"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The requested API version",
            "required": true,
            "type": "string",
            "default": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking was created successfully"
          },
          "202": {
            "description": "Message was received, booking will be created shortly"
          },
          "400": {
            "description": "Booking could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "500": {
            "description": "Booking could not be created",
            "schema": {
              "$ref": "#/definitions/TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError"
            }
          },
          "401": {
            "description": "Invalid authentication token"
          }
        },
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "TimeLog.TLP.Web.WebApi.V1.Salary.Models.AbsenceCode.AbsenceCodeApiReadModel": {
      "type": "object",
      "properties": {
        "AbsenceCodeID": {
          "format": "int32",
          "description": "Gets or sets the absence code identifier.",
          "type": "integer"
        },
        "AbsenceCode": {
          "description": "Gets or sets the absence code.",
          "type": "string"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "Description": {
          "description": "Gets or sets the description.",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        },
        "FlexPositiveFactor": {
          "format": "double",
          "description": "Gets or sets the flex positive factor.",
          "type": "number"
        },
        "SalaryAccountFactor": {
          "format": "double",
          "description": "Gets or sets the salary account factor.",
          "type": "number"
        },
        "SalaryAccountFactorEffect": {
          "format": "int32",
          "description": "Gets or sets the salary account factor effect.",
          "enum": [
            1,
            -1
          ],
          "type": "integer"
        },
        "SalaryAccountID": {
          "format": "int32",
          "description": "Gets or sets the salary account identifier.",
          "type": "integer"
        },
        "AbsenceCodeTypeID": {
          "format": "int32",
          "description": "Gets or sets the absence code type identifier.",
          "type": "integer"
        },
        "DeductCapacity": {
          "description": "Gets or sets a value indicating whether [deduct capacity].",
          "type": "boolean"
        },
        "TimeTrackingFormat": {
          "format": "int32",
          "description": "Gets or sets the time tracking format.",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "RequireApproval": {
          "description": "Gets or sets a value indicating whether [require approval].",
          "type": "boolean"
        },
        "IsPublicVisible": {
          "description": "Gets or sets a value indicating whether this instance is public visible.",
          "type": "boolean"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "TimeLog.TLP.Web.Infrastructure.WebApi.Common.ResponseError": {
      "type": "object",
      "properties": {
        "Code": {
          "format": "int32",
          "description": "Gets the code.",
          "type": "integer",
          "readOnly": true
        },
        "Details": {
          "description": "Gets the details.",
          "type": "array",
          "items": {
            "type": "object"
          },
          "readOnly": true
        },
        "Message": {
          "description": "Gets the message.",
          "type": "string",
          "readOnly": true
        },
        "Parameters": {
          "description": "Gets the parameters.",
          "type": "string",
          "readOnly": true
        },
        "Url": {
          "description": "Gets the URL.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Salary.Models.AbsenceCode.TimeTrackerApiCreateModelForAbsenceCode": {
      "type": "object",
      "properties": {
        "AbsenceCodeID": {
          "format": "int32",
          "description": "Gets or sets the absence code identifier.",
          "type": "integer"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "Minute": {
          "format": "int32",
          "description": "Gets or sets the minute.",
          "type": "integer"
        },
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Settings.Models.TimeRegistration.TimeRegistrationApiCreateByHoursModel": {
      "type": "object",
      "properties": {
        "Hours": {
          "format": "double",
          "description": "Gets or sets the hours.",
          "type": "number"
        },
        "Minutes": {
          "format": "int32",
          "description": "Gets or sets the minutes.",
          "type": "integer"
        },
        "AbsenceID": {
          "format": "int32",
          "description": "Gets or sets the absence identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Settings.Models.TimeRegistration.TimeRegistrationApiCreateByFullDayModel": {
      "type": "object",
      "properties": {
        "AbsenceID": {
          "format": "int32",
          "description": "Gets or sets the absence identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Settings.Models.TimeRegistration.TimeRegistrationApiCreateByHalfDayModel": {
      "type": "object",
      "properties": {
        "Type": {
          "format": "int32",
          "description": "Gets or sets the type.",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "AbsenceID": {
          "format": "int32",
          "description": "Gets or sets the absence identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.Address.AddressApiReadModel": {
      "type": "object",
      "properties": {
        "TypeName": {
          "description": "Gets or sets the name of the type.",
          "type": "string"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "Address": {
          "description": "Gets or sets the address.",
          "type": "string"
        },
        "Address2": {
          "description": "Gets or sets the address2.",
          "type": "string"
        },
        "Address3": {
          "description": "Gets or sets the address3.",
          "type": "string"
        },
        "Postcode": {
          "description": "Gets or sets the postcode.",
          "type": "string"
        },
        "City": {
          "description": "Gets or sets the city.",
          "type": "string"
        },
        "State": {
          "description": "Gets or sets the state.",
          "type": "string"
        },
        "CountryName": {
          "description": "Gets or sets the name of the country.",
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "description": "Gets or sets the type.",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "FullAddress": {
          "description": "Gets or sets the full address.",
          "type": "string"
        },
        "FullDetailAddress": {
          "description": "Gets or sets the full detail address.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Salary.Models.AllowanceLegislation.AllowanceLegislationApiReadModel": {
      "type": "object",
      "properties": {
        "AllowanceLegislationID": {
          "format": "int32",
          "description": "Gets or sets the allowance legislation ID",
          "type": "integer"
        },
        "CountryID": {
          "format": "int32",
          "description": "Gets or sets the country ID",
          "type": "integer"
        },
        "Description": {
          "description": "Gets or sets the description",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetPeriodApiReadModel": {
      "type": "object",
      "properties": {
        "WeekDays": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetWeekDayApiReadModel"
          }
        },
        "PeriodStatus": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "type": "integer"
        },
        "LastRejectedComment": {
          "type": "string"
        },
        "RecentRejectedComment": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetRejectedCommentApiReadModel"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetWeekDayApiReadModel": {
      "type": "object",
      "properties": {
        "ApprovalStatus": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "type": "integer"
        },
        "Hours": {
          "format": "double",
          "type": "number"
        },
        "Date": {
          "format": "date-time",
          "type": "string"
        },
        "LastRejectedComment": {
          "type": "string"
        },
        "RecentRejectedComment": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetRejectedCommentApiReadModel"
        },
        "RejectedRegistrations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Registration.Models.TimeTrackingItem.TimeTrackingItemApiReadModel"
          }
        },
        "HasResubmittedRejectedRegistration": {
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetRejectedCommentApiReadModel": {
      "type": "object",
      "properties": {
        "ManagerName": {
          "type": "string"
        },
        "ManagerComment": {
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Registration.Models.TimeTrackingItem.TimeTrackingItemApiReadModel": {
      "type": "object",
      "properties": {
        "CustomerID": {
          "format": "int32",
          "description": "Gets or sets the customer identifier.",
          "type": "integer"
        },
        "CustomerName": {
          "description": "Gets or sets the name of the customer.",
          "type": "string"
        },
        "CustomerNo": {
          "description": "Gets or sets the customer no.",
          "type": "string"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        },
        "ProjectName": {
          "description": "Gets or sets the name of the project.",
          "type": "string"
        },
        "ProjectNo": {
          "description": "Gets or sets the project no.",
          "type": "string"
        },
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the task identifier.",
          "type": "integer"
        },
        "TaskName": {
          "description": "Gets or sets the name of the task.",
          "type": "string"
        },
        "TaskFullName": {
          "description": "Gets or sets the full name of the task.",
          "type": "string"
        },
        "IsFixedPrice": {
          "description": "Gets or sets the is fixed price.",
          "type": "boolean"
        },
        "TaskNo": {
          "description": "Gets or sets the task no.",
          "type": "string"
        },
        "TaskIsActive": {
          "description": "Gets or sets the task is active.",
          "type": "boolean"
        },
        "AbsenceCodeID": {
          "format": "int32",
          "description": "Gets or sets the absence code identifier.",
          "type": "integer"
        },
        "AbsenceName": {
          "description": "Gets or sets the name of the absence.",
          "type": "string"
        },
        "AbsenceCode": {
          "description": "Gets or sets the absence code.",
          "type": "string"
        },
        "AbsenceIsActive": {
          "description": "Gets or sets the absence is active.",
          "type": "boolean"
        },
        "AdditionalTextIsRequired": {
          "description": "Gets or sets a value indicating whether [additional text is required].",
          "type": "boolean"
        },
        "DefaultBillable": {
          "description": "Gets or sets a value indicating whether [default billable].",
          "type": "boolean"
        },
        "IsETCProject": {
          "description": "Gets or sets a value indicating whether this instance is etc project.",
          "type": "boolean"
        },
        "ShowBillable": {
          "description": "Gets or sets a value indicating whether [show billable].",
          "type": "boolean"
        },
        "AllocatedHour": {
          "format": "int32",
          "description": "Gets or sets the allocated hour.",
          "type": "integer"
        },
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        },
        "EntityID": {
          "format": "int32",
          "description": "Gets or sets the entity identifier.",
          "type": "integer"
        },
        "EntityType": {
          "format": "int32",
          "description": "Gets or sets the type of the entity.",
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "Created": {
          "format": "date-time",
          "description": "Gets or sets the created.",
          "type": "string"
        },
        "CreatedBy": {
          "format": "int32",
          "description": "Gets or sets the created by.",
          "type": "integer"
        },
        "LastModified": {
          "format": "date-time",
          "description": "Gets or sets the last modified.",
          "type": "string"
        },
        "LastModifiedBy": {
          "format": "int32",
          "description": "Gets or sets the last modified by.",
          "type": "integer"
        },
        "IsBillable": {
          "description": "Gets or sets a value indicating whether this instance is billable.",
          "type": "boolean"
        },
        "Status": {
          "description": "Gets or sets a value indicating whether this {TimeLog.TLP.Web.WebApi.V1.Registration.Models.TimeTrackingItem.TimeTrackingItemApiReadModel} is status.",
          "type": "boolean"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "MonthlyPeriod": {
          "description": "Gets or sets the MonthlyPeriod",
          "type": "string"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "Hours": {
          "format": "double",
          "description": "Gets or sets the hours.",
          "type": "number"
        },
        "AdditionalTextField": {
          "description": "Gets or sets the additional text field.",
          "type": "string"
        },
        "InvoiceStatus": {
          "description": "Gets or sets a value indicating whether [invoice status].",
          "type": "boolean"
        },
        "TimeRegistrationApprovalStatus": {
          "format": "int32",
          "description": "Gets or sets a value indicating whether [time registration approval status].",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          "type": "integer"
        },
        "TimeTrackingFormat": {
          "format": "int32",
          "description": "Gets or sets the time tracking format.",
          "type": "integer"
        },
        "Minutes": {
          "format": "int32",
          "description": "Gets or sets the minutes.",
          "type": "integer"
        },
        "BillableHours": {
          "format": "double",
          "description": "Gets or sets the billable hours.",
          "type": "number"
        },
        "BillableMinutes": {
          "format": "int32",
          "description": "Gets or sets the billable minutes.",
          "type": "integer"
        },
        "IsFavourite": {
          "description": "Gets or sets a value indicating whether this instance is favourite.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetSubmitDatesModel": {
      "type": "object",
      "properties": {
        "Dates": {
          "description": "List of dates to submit.",
          "type": "array",
          "items": {
            "format": "date-time",
            "type": "string"
          }
        },
        "Comment": {
          "description": "Gets or sets the comment",
          "type": "string"
        },
        "EmployeeUserID": {
          "format": "int32",
          "description": "Gets or set the user id",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetApiSubmitPeriodModel": {
      "type": "object",
      "properties": {
        "StartDate": {
          "format": "date-time",
          "description": "The start date.",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "description": "The end date.",
          "type": "string"
        },
        "Comment": {
          "description": "Gets or sets the comment",
          "type": "string"
        },
        "EmployeeUserID": {
          "format": "int32",
          "description": "Gets or set the user id",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Employees.Models.Timesheet.ApprovalTimesheetApiSubmitTimeRegistrationsModel": {
      "type": "object",
      "properties": {
        "TimeRegistrationIds": {
          "description": "The time registrations ids to submit.",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "EmployeeUserID": {
          "format": "int32",
          "description": "Gets or set the user id",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Settings.Models.Barrier.BarrierApiReadModel": {
      "type": "object",
      "properties": {
        "BarrierID": {
          "format": "int32",
          "description": "Gets or sets the barrier identifier.",
          "type": "integer"
        },
        "Id": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Settings.Models.Barrier.BarrierApiUpdateModel": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Settings.Models.Barrier.BarrierApiCreateModel": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Settings.Models.Car.CarApiReadModel": {
      "type": "object",
      "properties": {
        "CarID": {
          "format": "int32",
          "description": "Gets or sets the car identifier.",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "LicensePlate": {
          "description": "Gets or sets the license plate.",
          "type": "string"
        },
        "CarType": {
          "format": "int32",
          "description": "Gets or sets the type of the car.",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "EmployeeUser": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserApiReadModel",
          "description": "Gets or sets the employee user."
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "EmployeeUserID": {
          "format": "int32",
          "description": "Gets or sets the employee user identifier.",
          "type": "integer"
        },
        "DefaultMileageRate": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRate.MileageRateApiReadModel",
          "description": "Gets or sets the mileage rate."
        },
        "IsDefault": {
          "description": "Gets or sets a value indicating whether this instance is default.",
          "type": "boolean"
        },
        "AllowEmployeeChangeMileageRate": {
          "description": "Gets or sets a value indicating whether [allow employee change mileage rate].",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserApiReadModel": {
      "type": "object",
      "properties": {
        "UserID": {
          "format": "int32",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "FirstName": {
          "description": "Gets or sets the first name.",
          "type": "string"
        },
        "LastName": {
          "description": "Gets or sets the last name.",
          "type": "string"
        },
        "Initials": {
          "description": "Gets or sets the initials.",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets if the user is active.",
          "type": "boolean"
        },
        "UserType": {
          "description": "Gets or sets the user type.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRate.MileageRateApiReadModel": {
      "type": "object",
      "properties": {
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "MileageRateID": {
          "format": "int32",
          "description": "Gets or sets mileage rate id",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets mileage rate name",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets mileage rate status",
          "type": "boolean"
        },
        "SalaryCodeTaxFree": {
          "description": "Gets or sets the salary code tax free.",
          "type": "string"
        },
        "SalaryCodeTaxable": {
          "description": "Gets or sets the salary code taxable.",
          "type": "string"
        },
        "AccountNumber": {
          "description": "Gets or sets the account number.",
          "type": "string"
        },
        "IsDefaultForPrivateCar": {
          "description": "Gets or sets a value indicating whether this instance is default for private car.",
          "type": "boolean"
        },
        "HasReimbursement": {
          "description": "Gets or sets a value indicating whether this instance has reimbursement.",
          "type": "boolean"
        },
        "UnitType": {
          "format": "int32",
          "description": "Gets or sets the type of the unit.",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "ReimbursementCurrencyID": {
          "format": "int32",
          "description": "Gets or sets the reimbursement currency identifier.",
          "type": "integer"
        },
        "LegalEntityID": {
          "format": "int32",
          "description": "Gets or sets the legal entity identifier.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Settings.Models.Car.CarApiUpdateModel": {
      "type": "object",
      "properties": {
        "CarID": {
          "format": "int32",
          "description": "Gets or sets the car identifier.",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "LicensePlate": {
          "description": "Gets or sets the license plate.",
          "type": "string"
        },
        "IsDefault": {
          "description": "Gets or sets a value indicating whether this instance is default.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Settings.Models.Car.CarApiCreateModel": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "LicensePlate": {
          "description": "Gets or sets the license plate.",
          "type": "string"
        },
        "IsDefault": {
          "description": "Gets or sets a value indicating whether this {TimeLog.TLP.Web.WebApi.V1.Settings.Models.Car.CarApiCreateModel} is default.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Invoicing.Models.ContractHourlyRate.ContractHourlyRateApiReadModel": {
      "type": "object",
      "properties": {
        "ContractHourlyRateID": {
          "format": "int32",
          "description": "Gets or sets the contract hourly rate ID",
          "type": "integer"
        },
        "ContractHourlyRateGUID": {
          "format": "uuid",
          "description": "Gets or sets the contract hourly rate GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ProjectSubContractID": {
          "format": "int32",
          "description": "Gets or sets the project sub contract ID",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name",
          "type": "string"
        },
        "Amount": {
          "format": "double",
          "description": "Gets or sets the amount",
          "type": "number"
        },
        "Type": {
          "description": "Gets or sets the type",
          "type": "string"
        },
        "ContractSpecificHourlyRateID": {
          "format": "int32",
          "description": "Gets or sets the contract specific hourly rate ID",
          "type": "integer"
        },
        "IsActive": {
          "description": "Gets or sets whether the contract hourly rate is active",
          "type": "boolean"
        },
        "IsManuallyAdjusted": {
          "description": "Gets or sets whether the contract hourly rate is manually adjusted",
          "type": "boolean"
        },
        "ProductNo": {
          "description": "Gets or sets the product number",
          "type": "string"
        },
        "CurrencyISO": {
          "description": "Gets or sets the currency ISO",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ContractModel.ContractModelApiReadModel": {
      "type": "object",
      "properties": {
        "ContractModelID": {
          "format": "int32",
          "description": "Gets or sets the Contract model identifier.",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Invoicing.Models.CostPrice.CostPriceApiReadModel": {
      "type": "object",
      "properties": {
        "CostPriceID": {
          "format": "int32",
          "description": "Gets or sets the cost price ID",
          "type": "integer"
        },
        "Amount": {
          "format": "double",
          "description": "Gets or sets the amount",
          "type": "number"
        },
        "Name": {
          "description": "Gets or sets the name",
          "type": "string"
        },
        "IsDefault": {
          "description": "Gets or sets whether the cost price is default",
          "type": "boolean"
        },
        "IsActive": {
          "description": "Gets or sets whether the cost price is active",
          "type": "boolean"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the cost price GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Common.Models.Country.CountryApiReadModel": {
      "type": "object",
      "properties": {
        "CountryID": {
          "format": "int32",
          "description": "Gets or sets the country ID",
          "type": "integer"
        },
        "Country": {
          "description": "Gets or sets the country name",
          "type": "string"
        },
        "ISO": {
          "description": "Gets or sets the ISO of country",
          "type": "string"
        },
        "DefaultCurrencyID": {
          "format": "int32",
          "description": "Gets or sets the default currency ID",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Common.Models.Currency.CurrencyApiReadModel": {
      "type": "object",
      "properties": {
        "CurrencyID": {
          "format": "int32",
          "description": "Gets or sets the currency identifier.",
          "type": "integer"
        },
        "CurrencyABB": {
          "description": "Gets or sets the currency abb.",
          "type": "string"
        },
        "DescriptiveName": {
          "description": "Gets or sets the name of the descriptive.",
          "type": "string"
        },
        "CurrentRate": {
          "format": "double",
          "description": "Gets or sets the current rate.",
          "type": "number"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiReadModel": {
      "type": "object",
      "properties": {
        "CustomerID": {
          "format": "int32",
          "description": "Gets or sets the customer identifier.",
          "type": "integer"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "No": {
          "description": "Gets or sets the no.",
          "type": "string"
        },
        "DefaultMileageDistance": {
          "format": "int32",
          "description": "Gets or sets the default mileage",
          "type": "integer"
        },
        "CustomerStatusID": {
          "format": "int32",
          "description": "Gets or sets the customer status ID",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiCreateModel": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets the Name",
          "type": "string"
        },
        "CurrencyID": {
          "format": "int32",
          "description": "Gets or sets the Currency ID",
          "type": "integer"
        },
        "CustomerStatusID": {
          "format": "int32",
          "description": "Gets or sets the Customer status ID",
          "type": "integer"
        },
        "CustomerNo": {
          "description": "Gets or sets the Customer no.",
          "type": "string"
        },
        "NickName": {
          "description": "Gets or sets the Nick name",
          "type": "string"
        },
        "PrimaryKAMID": {
          "format": "int32",
          "description": "Gets or sets the user name of the Primary KAM",
          "type": "integer"
        },
        "SecondaryKAMID": {
          "format": "int32",
          "description": "Gets or sets the ID of the Secondary KAM",
          "type": "integer"
        },
        "CustomerSince": {
          "format": "date-time",
          "description": "Gets or sets the date the customer started",
          "type": "string"
        },
        "IndustryID": {
          "format": "int32",
          "description": "Gets or sets the Industry ID",
          "type": "integer"
        },
        "Phone": {
          "description": "Gets or sets the phone number",
          "type": "string"
        },
        "Fax": {
          "description": "Gets or sets the fax number",
          "type": "string"
        },
        "Email": {
          "description": "Gets or sets the email",
          "type": "string"
        },
        "Website": {
          "description": "Gets or sets the customers website",
          "type": "string"
        },
        "Address": {
          "description": "Gets or sets the customer address",
          "type": "string"
        },
        "Address2": {
          "description": "Gets or sets the customer address",
          "type": "string"
        },
        "Address3": {
          "description": "Gets or sets the customer address",
          "type": "string"
        },
        "ZipCode": {
          "description": "Gets or sets the customer address zip code",
          "type": "string"
        },
        "City": {
          "description": "Gets or sets the customer address city",
          "type": "string"
        },
        "State": {
          "description": "Gets or sets the customer address state",
          "type": "string"
        },
        "CountryID": {
          "format": "int32",
          "description": "Gets or sets the customer address country",
          "type": "integer"
        },
        "UseInvoicingAddress": {
          "description": "Gets or sets if customer have separate invoicing address",
          "type": "boolean"
        },
        "InvoicingAddress": {
          "description": "Gets or sets the customer invoicing address",
          "type": "string"
        },
        "InvoicingAddress2": {
          "description": "Gets or sets the customer invoicing address",
          "type": "string"
        },
        "InvoicingAddress3": {
          "description": "Gets or sets the customer invoicing address",
          "type": "string"
        },
        "InvoicingAddressZipCode": {
          "description": "Gets or sets the customer invoicing address",
          "type": "string"
        },
        "InvoicingAddressCity": {
          "description": "Gets or sets the customer invoicing address zip code",
          "type": "string"
        },
        "InvoicingAddressState": {
          "description": "Gets or sets the customer invoicing address state",
          "type": "string"
        },
        "InvoicingAddressCountryID": {
          "format": "int32",
          "description": "Gets or sets the customer invoicing address country",
          "type": "integer"
        },
        "VatNo": {
          "description": "Gets or sets the VAT no",
          "type": "string"
        },
        "OrganizationNo": {
          "description": "Gets or sets the organization no",
          "type": "string"
        },
        "DefaultMileageDistance": {
          "format": "int32",
          "description": "Gets or sets the default mileage distance",
          "type": "integer"
        },
        "ExpenseIsBillable": {
          "description": "Gets or sets if expenses are billable",
          "type": "boolean"
        },
        "MileageIsBillable": {
          "description": "Gets or sets if mileage is billable",
          "type": "boolean"
        },
        "DefaultDistIsMaxBillable": {
          "description": "Gets or sets the default mileage distance is the max billable distance",
          "type": "boolean"
        },
        "ContactID": {
          "format": "int32",
          "description": "Gets or sets the contact person",
          "type": "integer"
        },
        "InvoiceAddressToUse": {
          "format": "int32",
          "description": "Gets or sets the customer address or the customer contact address should be used for invoicing",
          "enum": [
            0,
            1,
            2,
            4
          ],
          "type": "integer"
        },
        "InternalReferenceID": {
          "format": "int32",
          "description": "Gets or sets the internal reference",
          "type": "integer"
        },
        "CustomerReferenceID": {
          "format": "int32",
          "description": "Gets or sets the customer reference",
          "type": "integer"
        },
        "PaymentTermID": {
          "format": "int32",
          "description": "Gets or sets the payment term ID",
          "type": "integer"
        },
        "DiscountPercentage": {
          "format": "double",
          "description": "Gets or sets the discount percentage",
          "type": "number"
        },
        "CalculateVat": {
          "description": "Gets or sets if VAT should be calculated on the customer",
          "type": "boolean"
        },
        "VatPercentage": {
          "format": "double",
          "description": "Gets or sets the VAT percentage",
          "type": "number"
        },
        "UseEanNo": {
          "description": "Gets or sets if customer uses EAN",
          "type": "boolean"
        },
        "EanNo": {
          "description": "Gets or sets the EAN no.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.CRM.Models.CustomerStatus.CustomerStatusApiReadModel": {
      "type": "object",
      "properties": {
        "CustomerStatusID": {
          "format": "int32",
          "description": "Gets or sets the customer status identifier.",
          "type": "integer"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "IsDefault": {
          "description": "Gets or sets a value indicating whether this instance is default.",
          "type": "boolean"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Organization.Models.Department.DepartmentApiReadModel": {
      "type": "object",
      "properties": {
        "DepartmentID": {
          "format": "int32",
          "description": "Gets or sets the Department identifier.",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        },
        "No": {
          "description": "Gets or sets the No.",
          "type": "string"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ParentID": {
          "format": "int32",
          "description": "Gets or sets the Parent identifier.",
          "type": "integer"
        },
        "ManagerEmployeeID": {
          "format": "int32",
          "description": "Gets or sets the Manager Employee identifier.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.EmployeeExpense.EmployeeExpenseApiReadModel": {
      "type": "object",
      "properties": {
        "EmployeeExpenseID": {
          "format": "int32",
          "description": "Gets or sets the employee expense identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Amount": {
          "format": "double",
          "description": "Gets or sets the amount.",
          "type": "number"
        },
        "VatAmount": {
          "format": "double",
          "description": "Gets or sets the vat amount.",
          "type": "number"
        },
        "IsBillable": {
          "description": "Gets or sets a value indicating whether this instance is billable.",
          "type": "boolean"
        },
        "Number": {
          "description": "Gets or sets the number.",
          "type": "string"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "ExchangeRate": {
          "format": "double",
          "description": "Gets or sets the exchange rate.",
          "type": "number"
        },
        "CurrencyID": {
          "format": "int32",
          "description": "Gets or sets the currency identifier.",
          "type": "integer"
        },
        "EmployeeUserID": {
          "format": "int32",
          "description": "Gets or sets the employee user identifier.",
          "type": "integer"
        },
        "ExpenseTypeID": {
          "format": "int32",
          "description": "Gets or sets the expense type identifier.",
          "type": "integer"
        },
        "PaymentMethodID": {
          "format": "int32",
          "description": "Gets or sets the payment method identifier.",
          "type": "integer"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        },
        "ImageUrls": {
          "description": "Gets or sets the image urls.\r\nDoes not contain urls for other file types",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IsImageUrlLoaded": {
          "description": "Gets or sets a value indicating whether this instance is image URL loaded.",
          "type": "boolean"
        },
        "HasReceiptPictures": {
          "description": "Gets or sets a value indicating whether this instance has receipt pictures.",
          "type": "boolean"
        },
        "Project": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectHeader.ProjectHeaderApiReadModel",
          "description": "Gets or sets the project."
        },
        "Currency": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Common.Models.Currency.CurrencyApiReadModel",
          "description": "Gets or sets the currency."
        },
        "ExpenseType": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.ExpenseType.ExpenseTypeApiReadModel",
          "description": "Gets or sets the type of the expense."
        },
        "PaymentMethod": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.PaymentMethod.PaymentMethodApiReadModel",
          "description": "Gets or sets the payment method."
        },
        "FileUrls": {
          "description": "Gets or sets the all file attachments url",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IsFileUrlLoaded": {
          "description": "Gets or sets a value indicating whether this instance is file URL loaded.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectHeader.ProjectHeaderApiReadModel": {
      "type": "object",
      "properties": {
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "No": {
          "description": "Gets or sets the no.",
          "type": "string"
        },
        "ExpenseIsBillable": {
          "description": "Gets or sets a value indicating whether [expense is billable].",
          "type": "boolean"
        },
        "CustomerID": {
          "format": "int32",
          "description": "Gets or sets the customer identifier.",
          "type": "integer"
        },
        "Customer": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiReadModel",
          "description": "Gets or sets the customer."
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.ExpenseType.ExpenseTypeApiReadModel": {
      "type": "object",
      "properties": {
        "ExpenseTypeID": {
          "format": "int32",
          "description": "Gets or sets the expense type identifier.",
          "type": "integer"
        },
        "ExpenseTypeName": {
          "description": "Gets or sets the name of the expense type.",
          "type": "string"
        },
        "ShowInTravel": {
          "description": "Gets or sets a value indicating whether [show in travel].",
          "type": "boolean"
        },
        "AccountNo": {
          "description": "Gets or sets the account no.",
          "type": "string"
        },
        "VAT": {
          "format": "double",
          "description": "Gets or sets the vat.",
          "type": "number"
        },
        "ProductNo": {
          "description": "Gets or sets the product no.",
          "type": "string"
        },
        "SalaryCode": {
          "description": "Gets or sets the salary code.",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        },
        "IsEquipment": {
          "description": "Gets or sets a value indicating whether this instance is equipment.",
          "type": "boolean"
        },
        "CostPrice": {
          "format": "double",
          "description": "Gets or sets the cost price.",
          "type": "number"
        },
        "SalesPrice": {
          "format": "double",
          "description": "Gets or sets the sales price.",
          "type": "number"
        },
        "EquipmentText": {
          "description": "Gets or sets the equipment text.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.PaymentMethod.PaymentMethodApiReadModel": {
      "type": "object",
      "properties": {
        "PaymentMethodID": {
          "format": "int32",
          "description": "Gets or sets the payment method identifier.",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "IsPaidByEmployee": {
          "description": "Gets or sets a value indicating whether this instance is paid by employee.",
          "type": "boolean"
        },
        "IsDefaultForEmployeeExpense": {
          "description": "Gets or sets a value indicating whether this instance is default for employee expense.",
          "type": "boolean"
        },
        "IsDefaultForProjectExpense": {
          "description": "Gets or sets a value indicating whether this instance is default for project expense.",
          "type": "boolean"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        },
        "IsDefaultForImport": {
          "description": "Gets or sets a value indicating whether this instance is default for import.",
          "type": "boolean"
        },
        "IsPersonalCreditCard": {
          "description": "Gets or sets a value indicating whether this instance is personal credit card.",
          "type": "boolean"
        },
        "CreditCardEmployeeUserID": {
          "format": "int32",
          "description": "Gets or sets the credit card employee user identifier.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.EmployeeExpense.EmployeeExpenseApiUpdateModel": {
      "type": "object",
      "properties": {
        "EmployeeExpenseID": {
          "format": "int32",
          "description": "Gets or sets the employee expense identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Amount": {
          "format": "double",
          "description": "Gets or sets the amount.",
          "type": "number"
        },
        "VatAmount": {
          "format": "double",
          "description": "Gets or sets the vat amount.",
          "type": "number"
        },
        "IsBillable": {
          "description": "Gets or sets a value indicating whether this instance is billable.",
          "type": "boolean"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "ExchangeRate": {
          "format": "double",
          "description": "Gets or sets the exchange rate.",
          "type": "number"
        },
        "CurrencyID": {
          "format": "int32",
          "description": "Gets or sets the currency identifier.",
          "type": "integer"
        },
        "ExpenseTypeID": {
          "format": "int32",
          "description": "Gets or sets the expense type identifier.",
          "type": "integer"
        },
        "PaymentMethodID": {
          "format": "int32",
          "description": "Gets or sets the payment method identifier.",
          "type": "integer"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.EmployeeExpense.EmployeeExpenseApiCreateModel": {
      "type": "object",
      "properties": {
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Number": {
          "description": "Gets or sets the employee expense no.",
          "type": "string"
        },
        "Amount": {
          "format": "double",
          "description": "Gets or sets the amount.",
          "type": "number"
        },
        "VatAmount": {
          "format": "double",
          "description": "Gets or sets the vat amount.",
          "type": "number"
        },
        "IsBillable": {
          "description": "Gets or sets a value indicating whether this instance is billable.",
          "type": "boolean"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "ExchangeRate": {
          "format": "double",
          "description": "Gets or sets the exchange rate.",
          "type": "number"
        },
        "CurrencyID": {
          "format": "int32",
          "description": "Gets or sets the currency identifier.",
          "type": "integer"
        },
        "ExpenseTypeID": {
          "format": "int32",
          "description": "Gets or sets the expense type identifier.",
          "type": "integer"
        },
        "PaymentMethodID": {
          "format": "int32",
          "description": "Gets or sets the payment method identifier.",
          "type": "integer"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.EmployeeExpenseFinancialData.EmployeeExpenseFinancialDataApiReadModel": {
      "type": "object",
      "properties": {
        "UserID": {
          "format": "int32",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "TotalEmployeeExpenseCount": {
          "format": "int32",
          "description": "Gets or sets the total employee expense count.",
          "type": "integer"
        },
        "TotalAmount": {
          "format": "double",
          "description": "Gets or sets the total amount.",
          "type": "number"
        },
        "TotalAmountWithoutVat": {
          "format": "double",
          "description": "Gets or sets the total amount without vat.",
          "type": "number"
        },
        "CurrencyID": {
          "format": "int32",
          "description": "Gets or sets the currency identifier.",
          "type": "integer"
        },
        "CurrencyABB": {
          "description": "Gets or sets the currency abb.",
          "type": "string"
        },
        "CurrencyRate": {
          "format": "double",
          "description": "Gets or sets the currency rate.",
          "type": "number"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Organization.Models.EmployeeProjection.EmployeeProjectionApiReadModel": {
      "type": "object",
      "properties": {
        "ProjectionID": {
          "format": "int32",
          "description": "Gets or sets the projection identifier.",
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "User": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserApiReadModel",
          "description": "Gets or sets the user."
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "NormalWorkingTimeDayOrder": {
          "format": "int32",
          "description": "Gets or sets the normal working time day order.",
          "type": "integer"
        },
        "NormalWorkingHours": {
          "format": "double",
          "description": "Gets or sets the normal working hours.",
          "type": "number"
        },
        "NormalWorkingMinutes": {
          "format": "int32",
          "description": "Gets or sets the normal working minutes.",
          "type": "integer"
        },
        "IsClosed": {
          "description": "Gets or sets a value indicating whether this instance is closed.",
          "type": "boolean"
        },
        "IsInClosedAccountingPeriod": {
          "description": "Gets or sets a value indicating whether this instance is in closed accounting period.",
          "type": "boolean"
        },
        "HasRejectedTime": {
          "description": "Gets or sets a value indicating whether this instance has rejected time.",
          "type": "boolean"
        },
        "IsApproved": {
          "description": "Gets or sets a value indicating whether this instance is approved.",
          "type": "boolean"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Employees.Models.EmployeeType.EmployeeTypeApiReadModel": {
      "type": "object",
      "properties": {
        "EmployeeTypeID": {
          "format": "int32",
          "description": "Gets or sets the employee type ID",
          "type": "integer"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the employee type GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "IsActive": {
          "description": "Gets or sets whether the employee type is active",
          "type": "boolean"
        },
        "Name": {
          "description": "Gets or sets the employee type name",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Settings.Models.Feature.FeatureApiUpdateModel": {
      "type": "object",
      "properties": {
        "ID": {
          "format": "int32",
          "description": "Gets or sets the identifier.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426
          ],
          "type": "integer"
        },
        "Value": {
          "description": "Gets or sets a value indicating whether this {TimeLog.TLP.Web.WebApi.V1.Settings.Models.Feature.FeatureApiUpdateModel} is value.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Salary.Models.HolidayCalendar.HolidayCalendarApiReadModel": {
      "type": "object",
      "properties": {
        "HolidayCalendarID": {
          "format": "int32",
          "description": "Gets or sets the holiday calendar ID",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the holiday calendar name",
          "type": "string"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the holiday calendar GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Description": {
          "description": "Gets or sets the description",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Invoicing.Models.HourlyRate.HourlyRateApiReadModel": {
      "type": "object",
      "properties": {
        "HourlyRateID": {
          "format": "int32",
          "description": "Gets or sets the hourly rate ID",
          "type": "integer"
        },
        "HourlyRateName": {
          "description": "Gets or sets the hourly rate name",
          "type": "string"
        },
        "Amount": {
          "format": "double",
          "description": "Gets or sets the amount",
          "type": "number"
        },
        "Description": {
          "description": "Gets or sets the description",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets whether the hourly rate is active",
          "type": "boolean"
        },
        "CustomerID": {
          "format": "int32",
          "description": "Gets or sets the customer ID",
          "type": "integer"
        },
        "ProductNo": {
          "description": "Gets or sets the product number",
          "type": "string"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the hourly rate GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ServiceID": {
          "format": "int32",
          "description": "Gets or sets the service ID",
          "type": "integer"
        },
        "HourlyRateCurrencyID": {
          "format": "int32",
          "description": "Gets or sets the HourlyRate currency ID",
          "type": "integer"
        },
        "IsDefault": {
          "description": "Gets or sets whether the hourly rate is default",
          "type": "boolean"
        },
        "CurrencyISO": {
          "description": "Gets or sets the CurrencyISO",
          "type": "string"
        },
        "LegalEntityID": {
          "format": "int32",
          "description": "Gets or sets the legal entity ID",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.CRM.Models.Industry.IndustryApiReadModel": {
      "type": "object",
      "properties": {
        "IndustryID": {
          "format": "int32",
          "description": "Gets or sets the industry ID",
          "type": "integer"
        },
        "IndustryName": {
          "description": "Gets or sets the industry name",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active",
          "type": "boolean"
        },
        "IndustryGuid": {
          "format": "uuid",
          "description": "Gets or sets the industry GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Organization.Models.LegalEntity.LegalEntityApiReadModel": {
      "type": "object",
      "properties": {
        "LegalEntityID": {
          "format": "int32",
          "description": "Gets or sets the Legal Entity identifier.",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "CurrencyISO": {
          "description": "Gets or sets the Currency ISO.",
          "type": "string"
        },
        "CountryISO": {
          "description": "Gets or sets the Country ISO.",
          "type": "string"
        },
        "IsSystemLegalEntity": {
          "description": "Gets or sets a value indicating whether this instance is the system default.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRegistration.MileageRegistrationApiReadModel": {
      "type": "object",
      "properties": {
        "MileageRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the mileage registration identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Purpose": {
          "description": "Gets or sets the purpose.",
          "type": "string"
        },
        "OdometerStart": {
          "format": "int32",
          "description": "Gets or sets the odometer start.",
          "type": "integer"
        },
        "OdometerEnd": {
          "format": "int32",
          "description": "Gets or sets the odometer end.",
          "type": "integer"
        },
        "Distance": {
          "format": "int32",
          "description": "Gets or sets the distance.",
          "type": "integer"
        },
        "UnitType": {
          "format": "int32",
          "description": "Gets or sets the type of the unit.",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "StartAddress": {
          "description": "Gets or sets the start address.",
          "type": "string"
        },
        "EndAddress": {
          "description": "Gets or sets the end address.",
          "type": "string"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        },
        "Project": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectHeader.ProjectHeaderApiReadModel",
          "description": "Gets or sets the project."
        },
        "UserID": {
          "format": "int32",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "CarID": {
          "format": "int32",
          "description": "Gets or sets the car identifier.",
          "type": "integer"
        },
        "MileageRatesID": {
          "format": "int32",
          "description": "Gets or sets the mileage rates identifier.",
          "type": "integer"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "IsApproved": {
          "description": "Gets or sets a value indicating whether this instance is approved.",
          "type": "boolean"
        },
        "IsRoundtrip": {
          "description": "Gets or sets a value indicating whether this instance is roundtrip.",
          "type": "boolean"
        },
        "IsBillable": {
          "description": "Gets or sets a value indicating whether this instance is billable.",
          "type": "boolean"
        },
        "TotalDistance": {
          "format": "double",
          "description": "Gets or sets the total distance.",
          "type": "number"
        },
        "IsInvoiced": {
          "description": "Gets or sets a value indicating whether this instance is invoiced.",
          "type": "boolean"
        },
        "InterfaceCreated": {
          "format": "int32",
          "description": "Gets or sets the interface created.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            58,
            59,
            60,
            61,
            62,
            98,
            99
          ],
          "type": "integer"
        },
        "InterfaceModified": {
          "format": "int32",
          "description": "Gets or sets the interface modified.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            58,
            59,
            60,
            61,
            62,
            98,
            99
          ],
          "type": "integer"
        },
        "Car": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Settings.Models.Car.CarApiReadModel",
          "description": "Gets or sets the car."
        },
        "MileageRate": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRate.MileageRateApiReadModel",
          "description": "Gets or sets the mileage rate."
        },
        "TravelTimeRegistration": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TravelTimeRegistrationApiReadModel",
          "description": "Gets or sets the travel time registration."
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TravelTimeRegistrationApiReadModel": {
      "type": "object",
      "properties": {
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the travel time task identifier.",
          "type": "integer"
        },
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        },
        "Hours": {
          "format": "double",
          "description": "Gets or sets the hours.",
          "type": "number"
        },
        "Minutes": {
          "format": "int32",
          "description": "Gets or sets the minutes.",
          "type": "integer"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRegistration.MileageRegistrationApiUpdateModel": {
      "type": "object",
      "properties": {
        "MileageRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the mileage registration identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Purpose": {
          "description": "Gets or sets the purpose.",
          "type": "string"
        },
        "OdometerStart": {
          "format": "int32",
          "description": "Gets or sets the odometer start.",
          "type": "integer"
        },
        "OdometerEnd": {
          "format": "int32",
          "description": "Gets or sets the odometer end.",
          "type": "integer"
        },
        "Distance": {
          "format": "int32",
          "description": "Gets or sets the distance.",
          "type": "integer"
        },
        "StartAddress": {
          "description": "Gets or sets the start address.",
          "type": "string"
        },
        "EndAddress": {
          "description": "Gets or sets the end address.",
          "type": "string"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        },
        "CarID": {
          "format": "int32",
          "description": "Gets or sets the car identifier.",
          "type": "integer"
        },
        "MileageRateID": {
          "format": "int32",
          "description": "Gets or sets the mileage rates identifier.",
          "type": "integer"
        },
        "IsRoundtrip": {
          "description": "Gets or sets a value indicating whether this instance is roundtrip.",
          "type": "boolean"
        },
        "IsBillable": {
          "description": "Gets or sets a value indicating whether this instance is billable.",
          "type": "boolean"
        },
        "TravelTimeRegistration": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TravelTimeRegistrationApiUpdateModel",
          "description": "Gets or sets the travel time registration"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TravelTimeRegistrationApiUpdateModel": {
      "type": "object",
      "properties": {
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the task id of the registration.",
          "type": "integer"
        },
        "Hours": {
          "format": "double",
          "description": "Gets or sets the hours.",
          "type": "number"
        },
        "Minutes": {
          "format": "int32",
          "description": "Gets or sets the minutes.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.MileageRegistration.MileageRegistrationApiCreateModel": {
      "type": "object",
      "properties": {
        "TravelTimeRegistration": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TravelTimeRegistrationApiCreateModel",
          "description": "Gets or sets the travel time registration"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Purpose": {
          "description": "Gets or sets the purpose.",
          "type": "string"
        },
        "OdometerStart": {
          "format": "int32",
          "description": "Gets or sets the odometer start.",
          "type": "integer"
        },
        "OdometerEnd": {
          "format": "int32",
          "description": "Gets or sets the odometer end.",
          "type": "integer"
        },
        "Distance": {
          "format": "int32",
          "description": "Gets or sets the distance.",
          "type": "integer"
        },
        "StartAddress": {
          "description": "Gets or sets the start address.",
          "type": "string"
        },
        "EndAddress": {
          "description": "Gets or sets the end address.",
          "type": "string"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        },
        "CarID": {
          "format": "int32",
          "description": "Gets or sets the car identifier.",
          "type": "integer"
        },
        "MileageRateID": {
          "format": "int32",
          "description": "Gets or sets the mileage rate identifier.",
          "type": "integer"
        },
        "IsRoundtrip": {
          "description": "Gets or sets a value indicating whether this instance is roundtrip.",
          "type": "boolean"
        },
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        },
        "IsBillable": {
          "description": "Gets or sets a value indicating whether this instance is billable.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TravelTimeRegistrationApiCreateModel": {
      "type": "object",
      "properties": {
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the task identifier.",
          "type": "integer"
        },
        "Hours": {
          "format": "double",
          "description": "Gets or sets the hours.",
          "type": "number"
        },
        "Minutes": {
          "format": "int32",
          "description": "Gets or sets the minutes.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Employees.Models.NormalWorkingTime.NormalWorkingTimeApiReadModel": {
      "type": "object",
      "properties": {
        "NormalWorkingTimeID": {
          "format": "int32",
          "description": "Gets or sets the normal working time ID",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the normal working time name",
          "type": "string"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the normal working time GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "NormalWorkingTimeType": {
          "format": "int32",
          "description": "Gets or sets the normal working time type",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "IsActive": {
          "description": "Gets or sets whether the normal working time is active",
          "type": "boolean"
        },
        "IsDefault": {
          "description": "Gets or sets whether the normal working time is default",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Payment.PaymentApiReadModel": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets the name",
          "type": "string"
        },
        "PaymentID": {
          "format": "int32",
          "description": "Gets or sets the payment ID",
          "type": "integer"
        },
        "PaymentGuid": {
          "format": "uuid",
          "description": "Gets or sets the payment GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Comment": {
          "description": "Gets or sets the comment",
          "type": "string"
        },
        "Amount": {
          "format": "double",
          "description": "Gets or sets the amount",
          "type": "number"
        },
        "InvoiceDate": {
          "format": "date-time",
          "description": "Gets or sets the invoice date",
          "type": "string"
        },
        "IsReadyForInvoicing": {
          "description": "Gets or sets a value indicating whether this instance is ready for invoicing",
          "type": "boolean"
        },
        "InstallmentType": {
          "format": "int32",
          "description": "Gets or sets the installment type",
          "enum": [
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project ID",
          "type": "integer"
        },
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the task ID",
          "type": "integer"
        },
        "ProductNumberID": {
          "format": "int32",
          "description": "Gets or sets the product number ID",
          "type": "integer"
        },
        "Discount": {
          "format": "double",
          "description": "Gets or sets the discount",
          "type": "number"
        },
        "ProjectSubContractID": {
          "format": "int32",
          "description": "Gets or sets the project sub contract ID",
          "type": "integer"
        },
        "Quantity": {
          "format": "double",
          "description": "Gets or sets the quantity",
          "type": "number"
        },
        "UnitType": {
          "format": "int32",
          "description": "Gets or sets the unit type",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            6,
            7,
            8,
            9
          ],
          "type": "integer"
        },
        "Rate": {
          "format": "double",
          "description": "Gets or sets the rate",
          "type": "number"
        },
        "IsFixedPricePayment": {
          "description": "Gets or sets a value indicating whether the payment is fixed price",
          "type": "boolean"
        },
        "ExpensesCost": {
          "format": "double",
          "description": "Gets or sets the expenses cost",
          "type": "number"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Payment.PaymentApiCreateModel": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets the name",
          "type": "string"
        },
        "Comment": {
          "description": "Gets or sets the comment",
          "type": "string"
        },
        "Amount": {
          "format": "double",
          "description": "Gets or sets the amount",
          "type": "number"
        },
        "InvoiceDate": {
          "format": "date-time",
          "description": "Gets or sets the invoice date",
          "type": "string"
        },
        "IsReadyForInvoicing": {
          "description": "Gets or sets a value indicating whether this instance is ready for invoicing",
          "type": "boolean"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project ID",
          "type": "integer"
        },
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the task ID",
          "type": "integer"
        },
        "ProductNumber": {
          "description": "Gets or sets the product number",
          "type": "string"
        },
        "DiscountPercentage": {
          "format": "double",
          "description": "Gets or sets the discount",
          "type": "number"
        },
        "ProjectSubContractID": {
          "format": "int32",
          "description": "Gets or sets the project sub contract ID",
          "type": "integer"
        },
        "Quantity": {
          "format": "double",
          "description": "Gets or sets the quantity",
          "type": "number"
        },
        "IsFixedPricePayment": {
          "description": "Gets or sets a value indicating whether the payment is fixed price",
          "type": "boolean"
        },
        "UnitType": {
          "format": "int32",
          "description": "Gets or sets the unit type",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            6,
            7,
            8,
            9
          ],
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Invoicing.Models.PaymentTerm.PaymentTermApiReadModel": {
      "type": "object",
      "properties": {
        "ID": {
          "format": "int32",
          "description": "Gets or sets the payment term ID",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the payment term name",
          "type": "string"
        },
        "TermMessage": {
          "description": "Gets or sets the term message",
          "type": "string"
        },
        "CreditTerm": {
          "description": "Gets or sets the credit term",
          "type": "string"
        },
        "DaysOfCredit": {
          "format": "int32",
          "description": "Gets or sets the days of credit",
          "type": "integer"
        },
        "InterestRate": {
          "format": "double",
          "description": "Gets or sets the interest rate",
          "type": "number"
        },
        "InterestPeriod": {
          "description": "Gets or sets the interest period",
          "type": "string"
        },
        "ReminderFee": {
          "format": "double",
          "description": "Gets or sets the reminder fee",
          "type": "number"
        },
        "IsDefaultTerm": {
          "description": "Gets or sets whether this payment term is default term",
          "type": "boolean"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active",
          "type": "boolean"
        },
        "CurrencyID": {
          "format": "int32",
          "description": "Gets or sets the currency ID",
          "type": "integer"
        },
        "PaymentTermGuid": {
          "format": "uuid",
          "description": "Gets or sets the payment term Guid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.Product.ProductApiReadModel": {
      "type": "object",
      "properties": {
        "ProductNumberID": {
          "format": "int32",
          "description": "Gets or sets the product number ID",
          "type": "integer"
        },
        "ProductNumber": {
          "description": "Gets or sets the product number",
          "type": "string"
        },
        "ProductName": {
          "description": "Gets or sets the product name",
          "type": "string"
        },
        "Description": {
          "description": "Gets or sets the description",
          "type": "string"
        },
        "UseVAT": {
          "description": "Gets or sets whether the VAT is used",
          "type": "boolean"
        },
        "VATPercentage": {
          "format": "double",
          "description": "Gets or sets the VAT percentage",
          "type": "number"
        },
        "IsActive": {
          "description": "Gets or sets whether the product is active",
          "type": "boolean"
        },
        "ProductNumberGuid": {
          "format": "uuid",
          "description": "Gets or sets the product number GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "LegalEntityID": {
          "format": "int32",
          "description": "Gets or sets the legal entity ID",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Project.ProjectApiReadModel": {
      "type": "object",
      "properties": {
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "No": {
          "description": "Gets or sets the no.",
          "type": "string"
        },
        "ExpenseIsBillable": {
          "description": "Gets or sets a value indicating whether [expense is billable].",
          "type": "boolean"
        },
        "CustomerID": {
          "format": "int32",
          "description": "Gets or sets the customer identifier.",
          "type": "integer"
        },
        "Customer": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.CRM.Models.Customer.CustomerApiReadModel",
          "description": "Gets or sets the customer."
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Project.ProjectApiCreateModel": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets the project name",
          "type": "string"
        },
        "ProjectNo": {
          "description": "Gets or sets the project number",
          "type": "string"
        },
        "CustomerID": {
          "format": "int32",
          "description": "Gets or sets the customer ID",
          "type": "integer"
        },
        "Description": {
          "description": "Gets or sets the description",
          "type": "string"
        },
        "ProjectTemplateID": {
          "format": "int32",
          "description": "Gets or sets the project template ID",
          "type": "integer"
        },
        "ProjectManagerID": {
          "format": "int32",
          "description": "Gets or sets the project manager ID",
          "type": "integer"
        },
        "ProjectStartDate": {
          "format": "date-time",
          "description": "Gets or sets the start date of project",
          "type": "string"
        },
        "ProjectEndDate": {
          "format": "date-time",
          "description": "Gets or sets the end date of project",
          "type": "string"
        },
        "ProjectTypeID": {
          "format": "int32",
          "description": "Gets or sets the project type ID",
          "type": "integer"
        },
        "ProjectCategoryID": {
          "format": "int32",
          "description": "Gets or sets the project category ID",
          "type": "integer"
        },
        "CurrencyID": {
          "format": "int32",
          "description": "Gets or sets the currency ID",
          "type": "integer"
        },
        "LegalEntityID": {
          "format": "int32",
          "description": "Gets or sets the legal entity ID",
          "type": "integer"
        },
        "DepartmentID": {
          "format": "int32",
          "description": "Gets or sets the department ID",
          "type": "integer"
        },
        "AccountManagerID": {
          "format": "int32",
          "description": "Gets or sets the account manager ID",
          "type": "integer"
        },
        "PartnerID": {
          "format": "int32",
          "description": "Gets or sets the partner ID",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectCategory.ProjectCategoryApiReadModel": {
      "type": "object",
      "properties": {
        "ProjectCategoryID": {
          "format": "int32",
          "description": "Gets or sets the Project category identifier.",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        },
        "ProductNo": {
          "description": "Gets or sets the ProductNo.",
          "type": "string"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.ProjectExpense.ProjectExpenseApiReadModel": {
      "type": "object",
      "properties": {
        "ProjectExpenseID": {
          "format": "int32",
          "description": "Gets or sets the project expense ID",
          "type": "integer"
        },
        "ExpenseNo": {
          "description": "Gets or sets the expense number",
          "type": "string"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project ID",
          "type": "integer"
        },
        "EmployeeID": {
          "format": "int32",
          "description": "Gets or sets the employee ID",
          "type": "integer"
        },
        "PurchaseDate": {
          "format": "date-time",
          "description": "Gets or sets the purchase date",
          "type": "string"
        },
        "InvoiceNo": {
          "description": "Gets or sets the invoice number",
          "type": "string"
        },
        "CustomerID": {
          "format": "int32",
          "description": "Gets or sets the customer ID",
          "type": "integer"
        },
        "ExpenseCurrencyISO": {
          "description": "Gets or sets the expense currency ISO",
          "type": "string"
        },
        "ExpenseDirectProjectExchangeRate": {
          "format": "double",
          "description": "Gets or sets the expense currency exchange rate",
          "type": "number"
        },
        "AmountExpenseCurrency": {
          "format": "double",
          "description": "Gets or sets the amount in expense currency",
          "type": "number"
        },
        "VatExpenseCurrency": {
          "format": "double",
          "description": "Gets or sets the VAT",
          "type": "number"
        },
        "ProjectCurrencyISO": {
          "description": "Gets or sets the project currency ISO",
          "type": "string"
        },
        "SalesPriceProjectCurrency": {
          "format": "double",
          "description": "Gets or sets the sales price in project currency",
          "type": "number"
        },
        "SalesPriceSystemCurrency": {
          "format": "double",
          "description": "Gets or sets the sales price in system currency",
          "type": "number"
        },
        "SalesPriceProjectExchangeRate": {
          "format": "double",
          "description": "Gets or sets the sales price",
          "type": "number"
        },
        "ExpenseCostProjectCurrency": {
          "format": "double",
          "description": "Gets or sets the cost of the expense in project currency",
          "type": "number"
        },
        "ExpenseCostSystemCurrency": {
          "format": "double",
          "description": "Gets or sets the cost of the expense in system currency",
          "type": "number"
        },
        "ProfitRatio": {
          "format": "double",
          "description": "Gets or sets the profit ratio",
          "type": "number"
        },
        "InvoicedAmountSystemCurrency": {
          "format": "double",
          "description": "Gets or sets the invoiced amount",
          "type": "number"
        },
        "InvoicedAmountProjectCurrency": {
          "format": "double",
          "description": "Gets or sets the invoiced amount",
          "type": "number"
        },
        "Comment": {
          "description": "Gets or sets the comment",
          "type": "string"
        },
        "PaymentMethodID": {
          "format": "int32",
          "description": "Gets or sets the payment method ID",
          "type": "integer"
        },
        "ExpenseTypeID": {
          "format": "int32",
          "description": "Gets or sets the expense type ID",
          "type": "integer"
        },
        "IsBillable": {
          "description": "Gets or sets whether the expense is billable",
          "type": "boolean"
        },
        "IsApproved": {
          "description": "Gets or sets whether the expense is approved",
          "type": "boolean"
        },
        "ApprovedBy": {
          "format": "int32",
          "description": "Gets or sets the approved by",
          "type": "integer"
        },
        "InvoiceLineID": {
          "format": "int32",
          "description": "Gets or sets the invoice line ID",
          "type": "integer"
        },
        "UnitType": {
          "format": "int32",
          "description": "Gets or sets the unit type",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            6,
            7,
            8,
            9
          ],
          "type": "integer"
        },
        "ProductNo": {
          "description": "Gets or sets the product number",
          "type": "string"
        },
        "DisbursementGuid": {
          "format": "uuid",
          "description": "Gets or sets the disbursement GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ExternalID": {
          "description": "Gets or sets the external ID",
          "type": "string"
        },
        "ProjectSubContractID": {
          "format": "int32",
          "description": "Gets or sets the project sub contract ID",
          "type": "integer"
        },
        "InstallmentID": {
          "format": "int32",
          "description": "Gets or sets the installment ID",
          "type": "integer"
        },
        "LegalEntityID": {
          "format": "int32",
          "description": "Gets or sets the legal entity ID",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.ProjectExpense.ProjectExpenseApiCreateModel": {
      "type": "object",
      "properties": {
        "Comment": {
          "description": "Gets or sets the comment",
          "type": "string"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project ID",
          "type": "integer"
        },
        "PurchaseDate": {
          "format": "date-time",
          "description": "Gets or sets the purchase date",
          "type": "string"
        },
        "PaymentMethodID": {
          "format": "int32",
          "description": "Gets or sets the payment method ID",
          "type": "integer"
        },
        "ExpenseTypeID": {
          "format": "int32",
          "description": "Gets or sets the expense type ID",
          "type": "integer"
        },
        "AmountIncludingVatExpenseCurrency": {
          "format": "double",
          "description": "Gets or sets the amount including VAT in expense currency",
          "type": "number"
        },
        "SalesPriceAmountProjectCurrency": {
          "format": "double",
          "description": "Gets or sets the sales price amount in project currency",
          "type": "number"
        },
        "IsBillable": {
          "description": "Gets or sets whether the expense is billable",
          "type": "boolean"
        },
        "ExpenseNo": {
          "description": "Gets or sets the expense number",
          "type": "string"
        },
        "VatAmountExpenseCurrency": {
          "format": "double",
          "description": "Gets or sets the VAT amount in Expense Currency",
          "type": "number"
        },
        "ExpenseCurrencyISO": {
          "description": "Gets or sets the currency ISO",
          "type": "string"
        },
        "ExternalID": {
          "description": "Gets or sets the external ID",
          "type": "string"
        },
        "ProjectSubContractID": {
          "format": "int32",
          "description": "Gets or sets the project sub contract ID",
          "type": "integer"
        },
        "ProjectExpenseExchangeRate": {
          "format": "double",
          "description": "Gets or sets the exchange rate",
          "type": "number"
        },
        "SupplierID": {
          "format": "int32",
          "description": "Gets or sets the supplier ID",
          "type": "integer"
        },
        "SupplierInvoiceNo": {
          "description": "Gets or sets the supplier invoice number",
          "type": "string"
        },
        "ProfitRatio": {
          "format": "double",
          "description": "Gets or sets the profit ratio",
          "type": "number"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.EmployeeExpense.EmployeeExpenseApiCreateModelForProject": {
      "type": "object",
      "properties": {
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Number": {
          "description": "Gets or sets the employee expense no.",
          "type": "string"
        },
        "Amount": {
          "format": "double",
          "description": "Gets or sets the amount.",
          "type": "number"
        },
        "VatAmount": {
          "format": "double",
          "description": "Gets or sets the vat amount.",
          "type": "number"
        },
        "IsBillable": {
          "description": "Gets or sets a value indicating whether this instance is billable.",
          "type": "boolean"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "ExchangeRate": {
          "format": "double",
          "description": "Gets or sets the exchange rate.",
          "type": "number"
        },
        "CurrencyID": {
          "format": "int32",
          "description": "Gets or sets the currency identifier.",
          "type": "integer"
        },
        "ExpenseTypeID": {
          "format": "int32",
          "description": "Gets or sets the expense type identifier.",
          "type": "integer"
        },
        "PaymentMethodID": {
          "format": "int32",
          "description": "Gets or sets the payment method identifier.",
          "type": "integer"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.MileageRegistration.MileageRegistrationApiCreateModelForProject": {
      "type": "object",
      "properties": {
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Purpose": {
          "description": "Gets or sets the purpose.",
          "type": "string"
        },
        "OdometerStart": {
          "format": "int32",
          "description": "Gets or sets the odometer start.",
          "type": "integer"
        },
        "OdometerEnd": {
          "format": "int32",
          "description": "Gets or sets the odometer end.",
          "type": "integer"
        },
        "Distance": {
          "format": "int32",
          "description": "Gets or sets the distance.",
          "type": "integer"
        },
        "StartAddress": {
          "description": "Gets or sets the start address.",
          "type": "string"
        },
        "EndAddress": {
          "description": "Gets or sets the end address.",
          "type": "string"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        },
        "CarID": {
          "format": "int32",
          "description": "Gets or sets the car identifier.",
          "type": "integer"
        },
        "MileageRateID": {
          "format": "int32",
          "description": "Gets or sets the mileage rate identifier.",
          "type": "integer"
        },
        "IsRoundtrip": {
          "description": "Gets or sets a value indicating whether this instance is roundtrip.",
          "type": "boolean"
        },
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        },
        "IsBillable": {
          "description": "Gets or sets a value indicating whether this instance is billable.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Expenses.Models.ProjectProduct.ProjectProductApiReadModel": {
      "type": "object",
      "properties": {
        "ProductID": {
          "format": "int32",
          "description": "Gets or sets the product ID",
          "type": "integer"
        },
        "ProductGuid": {
          "format": "uuid",
          "description": "Gets or sets the product GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ProductName": {
          "description": "Gets or sets the product name",
          "type": "string"
        },
        "UnitTypeID": {
          "format": "int32",
          "description": "Gets or sets the unit type ID",
          "type": "integer"
        },
        "IsActive": {
          "description": "Gets or sets whether the product is active",
          "type": "boolean"
        },
        "Cost": {
          "format": "double",
          "description": "Gets or sets the cost",
          "type": "number"
        },
        "SalesPrice": {
          "format": "double",
          "description": "Gets or sets the sales price",
          "type": "number"
        },
        "StandardComment": {
          "description": "Gets or sets the standard comment",
          "type": "string"
        },
        "ProductNumberID": {
          "format": "int32",
          "description": "Gets or sets the product number ID",
          "type": "integer"
        },
        "ExpenseTypeID": {
          "format": "int32",
          "description": "Gets or sets the expense type ID",
          "type": "integer"
        },
        "PaymentMethodID": {
          "format": "int32",
          "description": "Gets or sets the payment method ID",
          "type": "integer"
        },
        "SupplierID": {
          "format": "int32",
          "description": "Gets or sets the supplier ID",
          "type": "integer"
        },
        "LegalEntityID": {
          "format": "int32",
          "description": "Gets or sets the legal entity ID",
          "type": "integer"
        },
        "CurrencyID": {
          "format": "int32",
          "description": "Gets or sets the currency ID",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.ProjectSubContractApiReadModel": {
      "type": "object",
      "properties": {
        "ContractID": {
          "format": "int32",
          "description": "Gets or sets the contract ID",
          "type": "integer"
        },
        "ContractGuid": {
          "format": "uuid",
          "description": "Gets or sets the contract GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ContractModelType": {
          "format": "int32",
          "description": "Gets or sets the contract model type",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            20
          ],
          "type": "integer"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project ID",
          "type": "integer"
        },
        "IsMainContract": {
          "description": "Gets or sets whether the contract is a main contract",
          "type": "boolean"
        },
        "ContractName": {
          "description": "Gets or sets the contract name",
          "type": "string"
        },
        "ContractStatus": {
          "format": "int32",
          "description": "Gets or sets the contract status",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "IsMileageBillable": {
          "description": "Gets or sets whether the mileage is billable",
          "type": "boolean"
        },
        "IsDefaultExpenses": {
          "description": "Gets or sets whether the expenses are default",
          "type": "boolean"
        },
        "ContractTypeID": {
          "format": "int32",
          "type": "integer"
        },
        "ContractTypeName": {
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.PrepaidServicesContractApiCreateModel": {
      "type": "object",
      "properties": {
        "IsFixedHourlyRate": {
          "description": "Gets or sets whether the hourly rate is fixed",
          "type": "boolean"
        },
        "HourlyRatePrice": {
          "format": "double",
          "description": "Gets or sets the hourly rate price",
          "type": "number"
        },
        "HourlyRateName": {
          "description": "Gets or sets the hourly rate name",
          "type": "string"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project ID",
          "type": "integer"
        },
        "ContractName": {
          "description": "Gets or sets the contract name",
          "type": "string"
        },
        "ContractStatus": {
          "format": "int32",
          "description": "Gets or sets the contract status",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "ContractOwnerUserID": {
          "format": "int32",
          "description": "Gets or sets the userID of the contract owner",
          "type": "integer"
        },
        "BudgetWorkAmount": {
          "format": "double",
          "description": "Gets or sets the budget work amount",
          "type": "number"
        },
        "BudgetWorkHour": {
          "format": "double",
          "description": "Gets or sets the budget work hour",
          "type": "number"
        },
        "HasCompletionNotification": {
          "description": "Gets or sets whether the contract has completion notification",
          "type": "boolean"
        },
        "CompletionNotificationPercentage": {
          "format": "double",
          "description": "Gets or sets the completion notification percentage",
          "type": "number"
        },
        "IsMileageBillable": {
          "description": "Gets or sets whether the mileage is billable",
          "type": "boolean"
        },
        "IsDefaultExpenses": {
          "description": "Gets or sets whether the expenses are default",
          "type": "boolean"
        },
        "ContractTypeID": {
          "format": "int32",
          "description": "Gets or sets the contract type ID",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.FixedPriceBasicContractApiCreateModel": {
      "type": "object",
      "properties": {
        "BudgetExpensesAmount": {
          "format": "double",
          "description": "Gets or sets the budget expenses amount",
          "type": "number"
        },
        "BudgetTravelAmount": {
          "format": "double",
          "description": "Gets or sets the budget travel amount",
          "type": "number"
        },
        "TargetHourlyRate": {
          "format": "double",
          "description": "Gets or sets the target hourly rate",
          "type": "number"
        },
        "PaymentPlanAmount": {
          "format": "double",
          "description": "Gets or sets the payment plan amount",
          "type": "number"
        },
        "RevenueExprAmount": {
          "format": "double",
          "description": "Gets or sets the revenue expr amount",
          "type": "number"
        },
        "RevenueTravelAmount": {
          "format": "double",
          "description": "Gets or sets the revenue travel amount",
          "type": "number"
        },
        "IsExpensesLinked": {
          "description": "Gets or sets whether the expenses are linked to revenue distribution",
          "type": "boolean"
        },
        "IsTravelLinked": {
          "description": "Gets or sets whether the travel are linked to revenue distribution",
          "type": "boolean"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project ID",
          "type": "integer"
        },
        "ContractName": {
          "description": "Gets or sets the contract name",
          "type": "string"
        },
        "ContractStatus": {
          "format": "int32",
          "description": "Gets or sets the contract status",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "ContractOwnerUserID": {
          "format": "int32",
          "description": "Gets or sets the userID of the contract owner",
          "type": "integer"
        },
        "BudgetWorkAmount": {
          "format": "double",
          "description": "Gets or sets the budget work amount",
          "type": "number"
        },
        "BudgetWorkHour": {
          "format": "double",
          "description": "Gets or sets the budget work hour",
          "type": "number"
        },
        "HasCompletionNotification": {
          "description": "Gets or sets whether the contract has completion notification",
          "type": "boolean"
        },
        "CompletionNotificationPercentage": {
          "format": "double",
          "description": "Gets or sets the completion notification percentage",
          "type": "number"
        },
        "IsMileageBillable": {
          "description": "Gets or sets whether the mileage is billable",
          "type": "boolean"
        },
        "IsDefaultExpenses": {
          "description": "Gets or sets whether the expenses are default",
          "type": "boolean"
        },
        "ContractTypeID": {
          "format": "int32",
          "description": "Gets or sets the contract type ID",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.TaskDrivenRevenueContractApiCreateModel": {
      "type": "object",
      "properties": {
        "BudgetExpensesAmount": {
          "format": "double",
          "description": "Gets or sets the budget expenses amount",
          "type": "number"
        },
        "BudgetTravelAmount": {
          "format": "double",
          "description": "Gets or sets the budget travel amount",
          "type": "number"
        },
        "TargetHourlyRate": {
          "format": "double",
          "description": "Gets or sets the target hourly rate",
          "type": "number"
        },
        "PaymentPlanAmount": {
          "format": "double",
          "description": "Gets or sets the payment plan amount",
          "type": "number"
        },
        "RevenueExprAmount": {
          "format": "double",
          "description": "Gets or sets the revenue expr amount",
          "type": "number"
        },
        "RevenueTravelAmount": {
          "format": "double",
          "description": "Gets or sets the revenue travel amount",
          "type": "number"
        },
        "IsExpensesLinked": {
          "description": "Gets or sets whether the expenses are linked to revenue distribution",
          "type": "boolean"
        },
        "IsTravelLinked": {
          "description": "Gets or sets whether the travel are linked to revenue distribution",
          "type": "boolean"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project ID",
          "type": "integer"
        },
        "ContractName": {
          "description": "Gets or sets the contract name",
          "type": "string"
        },
        "ContractStatus": {
          "format": "int32",
          "description": "Gets or sets the contract status",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "ContractOwnerUserID": {
          "format": "int32",
          "description": "Gets or sets the userID of the contract owner",
          "type": "integer"
        },
        "BudgetWorkAmount": {
          "format": "double",
          "description": "Gets or sets the budget work amount",
          "type": "number"
        },
        "BudgetWorkHour": {
          "format": "double",
          "description": "Gets or sets the budget work hour",
          "type": "number"
        },
        "HasCompletionNotification": {
          "description": "Gets or sets whether the contract has completion notification",
          "type": "boolean"
        },
        "CompletionNotificationPercentage": {
          "format": "double",
          "description": "Gets or sets the completion notification percentage",
          "type": "number"
        },
        "IsMileageBillable": {
          "description": "Gets or sets whether the mileage is billable",
          "type": "boolean"
        },
        "IsDefaultExpenses": {
          "description": "Gets or sets whether the expenses are default",
          "type": "boolean"
        },
        "ContractTypeID": {
          "format": "int32",
          "description": "Gets or sets the contract type ID",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.TimeMaterialBasicContractApiCreateModel": {
      "type": "object",
      "properties": {
        "BudgetExpensesAmount": {
          "format": "double",
          "description": "Gets or sets the budget expenses amount",
          "type": "number"
        },
        "BudgetTravelAmount": {
          "format": "double",
          "description": "Gets or sets the budget travel amount",
          "type": "number"
        },
        "HasBudgetOverrunNotification": {
          "description": "Gets or sets whether the contract has budget overrun notification",
          "type": "boolean"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project ID",
          "type": "integer"
        },
        "ContractName": {
          "description": "Gets or sets the contract name",
          "type": "string"
        },
        "ContractStatus": {
          "format": "int32",
          "description": "Gets or sets the contract status",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "ContractOwnerUserID": {
          "format": "int32",
          "description": "Gets or sets the userID of the contract owner",
          "type": "integer"
        },
        "BudgetWorkAmount": {
          "format": "double",
          "description": "Gets or sets the budget work amount",
          "type": "number"
        },
        "BudgetWorkHour": {
          "format": "double",
          "description": "Gets or sets the budget work hour",
          "type": "number"
        },
        "HasCompletionNotification": {
          "description": "Gets or sets whether the contract has completion notification",
          "type": "boolean"
        },
        "CompletionNotificationPercentage": {
          "format": "double",
          "description": "Gets or sets the completion notification percentage",
          "type": "number"
        },
        "IsMileageBillable": {
          "description": "Gets or sets whether the mileage is billable",
          "type": "boolean"
        },
        "IsDefaultExpenses": {
          "description": "Gets or sets whether the expenses are default",
          "type": "boolean"
        },
        "ContractTypeID": {
          "format": "int32",
          "description": "Gets or sets the contract type ID",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectSubContract.TimeMaterialAccountEndBalancingContractApiCreateModel": {
      "type": "object",
      "properties": {
        "BudgetExpensesAmount": {
          "format": "double",
          "description": "Gets or sets the budget expenses amount",
          "type": "number"
        },
        "BudgetTravelAmount": {
          "format": "double",
          "description": "Gets or sets the budget travel amount",
          "type": "number"
        },
        "HasBudgetOverrunNotification": {
          "description": "Gets or sets whether the contract has budget overrun notification",
          "type": "boolean"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project ID",
          "type": "integer"
        },
        "ContractName": {
          "description": "Gets or sets the contract name",
          "type": "string"
        },
        "ContractStatus": {
          "format": "int32",
          "description": "Gets or sets the contract status",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "ContractOwnerUserID": {
          "format": "int32",
          "description": "Gets or sets the userID of the contract owner",
          "type": "integer"
        },
        "BudgetWorkAmount": {
          "format": "double",
          "description": "Gets or sets the budget work amount",
          "type": "number"
        },
        "BudgetWorkHour": {
          "format": "double",
          "description": "Gets or sets the budget work hour",
          "type": "number"
        },
        "HasCompletionNotification": {
          "description": "Gets or sets whether the contract has completion notification",
          "type": "boolean"
        },
        "CompletionNotificationPercentage": {
          "format": "double",
          "description": "Gets or sets the completion notification percentage",
          "type": "number"
        },
        "IsMileageBillable": {
          "description": "Gets or sets whether the mileage is billable",
          "type": "boolean"
        },
        "IsDefaultExpenses": {
          "description": "Gets or sets whether the expenses are default",
          "type": "boolean"
        },
        "ContractTypeID": {
          "format": "int32",
          "description": "Gets or sets the contract type ID",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectTemplate.ProjectTemplateApiReadModel": {
      "type": "object",
      "properties": {
        "ProjectTemplateGuid": {
          "format": "uuid",
          "description": "Gets or sets the project template GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ProjectTemplateID": {
          "format": "int32",
          "description": "Gets or sets the project template ID",
          "type": "integer"
        },
        "ProjectTemplateName": {
          "description": "Gets or sets the project template name",
          "type": "string"
        },
        "ProjectTemplateDescription": {
          "description": "Gets or sets the project template description",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectType.ProjectTypeApiReadModel": {
      "type": "object",
      "properties": {
        "ProjectTypeID": {
          "format": "int32",
          "description": "Gets or sets the Project type identifier.",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        },
        "ProductNo": {
          "description": "Gets or sets the ProductNo.",
          "type": "string"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Security.Models.RoleApiReadModel": {
      "type": "object",
      "properties": {
        "RoleID": {
          "format": "int32",
          "description": "Gets or sets the Role identifier.",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "Description": {
          "description": "Gets or sets the Description.",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        },
        "IsLockedSystemRole": {
          "description": "Gets or sets a value indicating whether this instance is a locked system role.",
          "type": "boolean"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Security.Models.RoleApiCreateModel": {
      "type": "object",
      "properties": {
        "RoleID": {
          "format": "int32",
          "description": "Gets or sets the role identifier.",
          "type": "integer"
        },
        "AreaPrivilegeGUID": {
          "format": "uuid",
          "description": "Gets or sets the area privilege unique identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "EventTypeGroupGUID": {
          "format": "uuid",
          "description": "Gets or sets the event type group unique identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Salary.Models.SalaryGroup.SalaryGroupApiReadModel": {
      "type": "object",
      "properties": {
        "SalaryGroupID": {
          "format": "int32",
          "description": "Gets or sets the salary group ID",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the salary group name",
          "type": "string"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the salary group GUID",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Description": {
          "description": "Gets or sets the description",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets whether the salary group is active",
          "type": "boolean"
        },
        "IsSystemSalaryGroup": {
          "description": "Gets or sets whether the salary group is system salary group",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Settings.Models.Setting.SettingApiUpdateModel": {
      "type": "object",
      "properties": {
        "ID": {
          "format": "int32",
          "description": "Gets or sets the identifier.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275
          ],
          "type": "integer"
        },
        "Value": {
          "description": "Gets or sets the value.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel": {
      "type": "object",
      "properties": {
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the task identifier.",
          "type": "integer"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "No": {
          "description": "Gets or sets the no.",
          "type": "string"
        },
        "IsFixedPrice": {
          "description": "Gets or sets a value indicating whether this instance is fixed price.",
          "type": "boolean"
        },
        "IsDefaultBillable": {
          "description": "Gets or sets a value indicating whether this instance is default billable.",
          "type": "boolean"
        },
        "AdditionalTextIsRequired": {
          "description": "Gets or sets a value indicating whether this instance requires additional text to be entered.",
          "type": "boolean"
        },
        "ParentFullName": {
          "description": "Gets or sets the full name of the parent.",
          "type": "string"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        },
        "Project": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.ProjectHeader.ProjectHeaderApiReadModel",
          "description": "Gets or sets the project."
        },
        "ParentTaskID": {
          "format": "int32",
          "description": "Gets or sets the parent task ID.",
          "type": "integer"
        },
        "IsTravelTimeTask": {
          "description": "Gets or sets a value indicating whether this instance is a travel time task.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiCreateModel": {
      "type": "object",
      "properties": {
        "TaskNo": {
          "description": "Gets or sets the task number",
          "type": "string"
        },
        "TaskName": {
          "description": "Gets or sets the task name",
          "type": "string"
        },
        "Description": {
          "description": "Gets or sets the description",
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "description": "Gets or sets the start date",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "description": "Gets or sets the end date",
          "type": "string"
        },
        "AdditionalTextIsRequired": {
          "description": "Gets or sets a value indicating whether additional text is required",
          "type": "boolean"
        },
        "BudgetHours": {
          "format": "double",
          "description": "Gets or sets the budget hours",
          "type": "number"
        },
        "BudgetAmount": {
          "format": "double",
          "description": "Gets or sets the budget amount",
          "type": "number"
        },
        "ProjectSubContractID": {
          "format": "int32",
          "description": "Gets or sets the project sub contract ID.\r\nWhen creating a main task, if project sub contract ID is not supplied, the main contract ID of its project will be used.\r\nWhen creating a sub task, if project sub contract ID is not supplied, the contract ID of its parent task will be used.",
          "type": "integer"
        },
        "IsReadyForInvoicing": {
          "description": "Gets or sets a value indicating whether the task is ready for invoicing",
          "type": "boolean"
        },
        "TaskTypeID": {
          "format": "int32",
          "description": "Gets or sets the task type ID",
          "type": "integer"
        },
        "HourlyRateID": {
          "format": "int32",
          "description": "Gets or sets the hourly rate ID",
          "type": "integer"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project ID",
          "type": "integer"
        },
        "ParentTaskID": {
          "format": "int32",
          "description": "Gets or sets the parent task ID",
          "type": "integer"
        },
        "IsBillable": {
          "description": "Gets or sets a value indicating whether the task is billable",
          "type": "boolean"
        },
        "PaymentRecognitionModel": {
          "format": "int32",
          "description": "Gets or sets the PaymentRecognitionModel",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "PaymentAmount": {
          "format": "double",
          "description": "Gets or sets the payment amount",
          "type": "number"
        },
        "TaskHourlyRate": {
          "format": "double",
          "description": "Gets or sets the hourly rate of a TDR task",
          "type": "number"
        },
        "PaymentProductNo": {
          "description": "Gets or sets the payment product no. for a TDR task",
          "type": "string"
        },
        "PaymentName": {
          "description": "Gets or sets the payment name for a TDR task",
          "type": "string"
        },
        "PaymentInvoiceDate": {
          "format": "date-time",
          "description": "Gets or sets the payment invoice date for a TDR task",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.TimeRegistration.TimeRegistrationApiCreateModel": {
      "type": "object",
      "properties": {
        "Billable": {
          "description": "Gets or sets a value indicating whether this {TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.TimeRegistration.TimeRegistrationApiCreateModel} is billable.",
          "type": "boolean"
        },
        "BillableHours": {
          "format": "double",
          "description": "Gets or sets the billable hours.",
          "type": "number"
        },
        "BillableMinutes": {
          "format": "int32",
          "description": "Gets or sets the billable minutes.",
          "type": "integer"
        },
        "Hours": {
          "format": "double",
          "description": "Gets or sets the hours.",
          "type": "number"
        },
        "Minutes": {
          "format": "int32",
          "description": "Gets or sets the minutes.",
          "type": "integer"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "AdditionalComment": {
          "description": "Gets or sets the additional comment.",
          "type": "string"
        },
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the task identifier.",
          "type": "integer"
        },
        "Factor": {
          "format": "double",
          "description": "Gets or sets the factor.",
          "type": "number"
        },
        "MonthlyPeriod": {
          "description": "Gets or sets the monthly period.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.TaskType.TaskTypeApiReadModel": {
      "type": "object",
      "properties": {
        "TaskTypeID": {
          "format": "int32",
          "description": "Gets or sets the Task type identifier.",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "IsActive": {
          "description": "Gets or sets a value indicating whether this instance is active.",
          "type": "boolean"
        },
        "ProductNo": {
          "description": "Gets or sets the ProductNo.",
          "type": "string"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiReadModel": {
      "type": "object",
      "properties": {
        "AdditionalTextField": {
          "description": "Gets or sets the additional text field.",
          "type": "string"
        },
        "ApprovalStatus": {
          "format": "int32",
          "description": "Gets or sets the approval status.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          "type": "integer"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "description": "Gets or sets the created.",
          "type": "string"
        },
        "CreatedBy": {
          "format": "int32",
          "description": "Gets or sets the created by.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "DepartmentID": {
          "format": "int32",
          "description": "Gets or sets the department identifier.",
          "type": "integer"
        },
        "EntityID": {
          "format": "int32",
          "description": "Gets or sets the entity identifier.",
          "type": "integer"
        },
        "EntityType": {
          "format": "int32",
          "description": "Gets or sets the type of the entity.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250
          ],
          "type": "integer"
        },
        "Factor": {
          "format": "double",
          "description": "Gets or sets the factor.",
          "type": "number"
        },
        "InvoiceStatus": {
          "format": "int32",
          "description": "Gets or sets the invoice status.",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "IsBillable": {
          "description": "Gets or sets a value indicating whether this instance is billable.",
          "type": "boolean"
        },
        "IsInClosedAccountingPeriod": {
          "description": "Gets or sets a value indicating whether this instance is in closed accounting period.",
          "type": "boolean"
        },
        "IsFixedPrice": {
          "description": "Gets or sets the is fixed price.",
          "type": "boolean"
        },
        "IsInvoiced": {
          "description": "Gets or sets a value indicating whether this instance is invoiced.",
          "type": "boolean"
        },
        "LastModified": {
          "format": "date-time",
          "description": "Gets or sets the last modified.",
          "type": "string"
        },
        "LastModifiedBy": {
          "format": "int32",
          "description": "Gets or sets the last modified by.",
          "type": "integer"
        },
        "Hours": {
          "format": "double",
          "description": "Gets or sets the hours.",
          "type": "number"
        },
        "Status": {
          "format": "int32",
          "description": "Gets or sets the status.",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "TimeRegistrationGUID": {
          "format": "uuid",
          "description": "Gets or sets the time registration unique identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        },
        "TimeTrackingFormat": {
          "format": "int32",
          "description": "Gets or sets the time tracking format.",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "Minutes": {
          "format": "int32",
          "description": "Gets or sets the minutes.",
          "type": "integer"
        },
        "IsMeeting": {
          "description": "Gets or sets a value indicating whether this instance is meeting.",
          "type": "boolean"
        },
        "CalendarEventID": {
          "format": "int32",
          "description": "Gets or sets the calendar event identifier.",
          "type": "integer"
        },
        "BillableHours": {
          "format": "double",
          "description": "Gets or sets the billable hours.",
          "type": "number"
        },
        "BillableMinutes": {
          "format": "int32",
          "description": "Gets or sets the billable minutes.",
          "type": "integer"
        },
        "InterfaceCreated": {
          "format": "int32",
          "description": "Gets or sets the interface created.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            58,
            59,
            60,
            61,
            62,
            98,
            99
          ],
          "type": "integer"
        },
        "InterfaceModified": {
          "format": "int32",
          "description": "Gets or sets the interface modified.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            58,
            59,
            60,
            61,
            62,
            98,
            99
          ],
          "type": "integer"
        },
        "MonthlyPeriod": {
          "description": "Gets or sets the monthly period.",
          "type": "string"
        },
        "AbsenceCode": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Salary.Models.AbsenceCode.AbsenceCodeApiReadModel",
          "description": "Gets or sets the absence code."
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiUpdateModel": {
      "type": "object",
      "properties": {
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the task identifier.",
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Hours": {
          "format": "double",
          "description": "Gets or sets the hours.",
          "type": "number"
        },
        "GroupType": {
          "format": "int32",
          "description": "Gets or sets the type of the group.",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "type": "integer"
        },
        "Billable": {
          "description": "Gets or sets a value indicating whether this {TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiUpdateModel} is billable.",
          "type": "boolean"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "AdditionalComment": {
          "description": "Gets or sets the additional comment.",
          "type": "string"
        },
        "TimeTrackingFormat": {
          "format": "int32",
          "description": "Gets or sets the time tracking format.",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "BillableHours": {
          "format": "double",
          "description": "Gets or sets the billable hours.",
          "type": "number"
        },
        "EntityID": {
          "format": "int32",
          "description": "Gets or sets the entity identifier.",
          "type": "integer"
        },
        "BillableMinutes": {
          "format": "int32",
          "description": "Gets or sets the billable minutes.",
          "type": "integer"
        },
        "Minutes": {
          "format": "int32",
          "description": "Gets or sets the minutes.",
          "type": "integer"
        },
        "Factor": {
          "format": "double",
          "description": "Gets or sets the factor.",
          "type": "number"
        },
        "MonthlyPeriod": {
          "description": "Gets or sets the monthly period.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiCreateModel": {
      "type": "object",
      "properties": {
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the task identifier.",
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Hours": {
          "format": "double",
          "description": "Gets or sets the hours.",
          "type": "number"
        },
        "GroupType": {
          "format": "int32",
          "description": "Gets or sets the type of the group.",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "type": "integer"
        },
        "Billable": {
          "description": "Gets or sets a value indicating whether this {TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiCreateModel} is billable.",
          "type": "boolean"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "AdditionalComment": {
          "description": "Gets or sets the additional comment.",
          "type": "string"
        },
        "TimeTrackingFormat": {
          "format": "int32",
          "description": "Gets or sets the time tracking format.",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "BillableHours": {
          "format": "double",
          "description": "Gets or sets the billable hours.",
          "type": "number"
        },
        "EntityID": {
          "format": "int32",
          "description": "Gets or sets the entity identifier.",
          "type": "integer"
        },
        "BillableMinutes": {
          "format": "int32",
          "description": "Gets or sets the billable minutes.",
          "type": "integer"
        },
        "Minutes": {
          "format": "int32",
          "description": "Gets or sets the minutes.",
          "type": "integer"
        },
        "Factor": {
          "format": "double",
          "description": "Gets or sets the factor.",
          "type": "number"
        },
        "MonthlyPeriod": {
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationImportApiCreateModel": {
      "type": "object",
      "properties": {
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the task identifier.",
          "type": "integer"
        },
        "ProjectID": {
          "format": "int32",
          "description": "Gets or sets the project identifier.",
          "type": "integer"
        },
        "ContractID": {
          "format": "int32",
          "description": "Gets or sets the contract identifier.",
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Hours": {
          "format": "double",
          "description": "Gets or sets the hours.",
          "type": "number"
        },
        "GroupType": {
          "format": "int32",
          "description": "Gets or sets the type of the group.",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "type": "integer"
        },
        "AbsenceCodeID": {
          "format": "int32",
          "description": "Gets or sets the type of the group.",
          "type": "integer"
        },
        "Billable": {
          "description": "Gets or sets a value indicating whether this {TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiCreateModel} is billable.",
          "type": "boolean"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "AdditionalComment": {
          "description": "Gets or sets the additional comment.",
          "type": "string"
        },
        "BillableHours": {
          "format": "double",
          "description": "Gets or sets the billable hours.",
          "type": "number"
        },
        "MonthlyPeriod": {
          "type": "string"
        },
        "HourlyRate": {
          "format": "double",
          "description": "Gets or sets the hourly rate.",
          "type": "number"
        },
        "HourlyRateName": {
          "description": "Gets or sets the hourly rate name.",
          "type": "string"
        },
        "CostPrice": {
          "format": "double",
          "description": "Gets or sets the cost price.",
          "type": "number"
        },
        "CostPriceName": {
          "description": "Gets or sets the cost price name.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiUpdateTimeModel": {
      "type": "object",
      "properties": {
        "Hours": {
          "format": "double",
          "description": "Gets or sets the hours.",
          "type": "number"
        },
        "Minutes": {
          "format": "int32",
          "description": "Gets or sets the minutes.",
          "type": "integer"
        },
        "Billable": {
          "description": "Gets or sets a value indicating whether this {TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiUpdateTimeModel} is billable.",
          "type": "boolean"
        },
        "BillableHours": {
          "format": "double",
          "description": "Gets or sets the billable hours.",
          "type": "number"
        },
        "BillableMinutes": {
          "format": "int32",
          "description": "Gets or sets the billable minutes.",
          "type": "integer"
        },
        "Factor": {
          "format": "double",
          "description": "Gets or sets the factor.",
          "type": "number"
        },
        "MonthlyPeriod": {
          "description": "Gets or sets the monthly period",
          "type": "string"
        },
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the task id of the registration.",
          "type": "integer"
        },
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "AdditionalComment": {
          "description": "Gets or sets the additional comment.",
          "type": "string"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date of the time registration.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiCreateModelForRegistration": {
      "type": "object",
      "properties": {
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiUpdateHoursAbsenceModel": {
      "type": "object",
      "properties": {
        "Hours": {
          "format": "double",
          "description": "Gets or sets the hours.",
          "type": "number"
        },
        "Minutes": {
          "format": "int32",
          "description": "Gets or sets the minutes.",
          "type": "integer"
        },
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "AdditionalComment": {
          "description": "Gets or sets the additional comment.",
          "type": "string"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date of the time registration.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiUpdateFullDayAbsenceModel": {
      "type": "object",
      "properties": {
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "AdditionalComment": {
          "description": "Gets or sets the additional comment.",
          "type": "string"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date of the time registration.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistration.TimeRegistrationApiUpdateHalfOrFullDaysAbsenceModel": {
      "type": "object",
      "properties": {
        "Type": {
          "format": "int32",
          "description": "Gets or sets the type.",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "AdditionalComment": {
          "description": "Gets or sets the additional comment.",
          "type": "string"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date of the time registration.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiUpdateModelBase": {
      "type": "object",
      "properties": {
        "TimeTrackerID": {
          "format": "int32",
          "description": "Gets or sets the time tracker identifier.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistrationFinancialData.TimeRegistrationFinancialDataApiReadModel": {
      "type": "object",
      "properties": {
        "UserID": {
          "format": "int32",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "TotalActualHour": {
          "format": "double",
          "description": "Gets or sets the total actual hour.",
          "type": "number"
        },
        "TotalBillableHour": {
          "format": "double",
          "description": "Gets or sets the total billable hour.",
          "type": "number"
        },
        "TotalActualMinute": {
          "format": "int32",
          "description": "Gets or sets the total actual minute.",
          "type": "integer"
        },
        "TotalBillableMinute": {
          "format": "int32",
          "description": "Gets or sets the total billable minute.",
          "type": "integer"
        },
        "TotalBillableAmount": {
          "format": "double",
          "description": "Gets or sets the total billable amount.",
          "type": "number"
        },
        "BillableCurrencyABB": {
          "description": "Gets or sets the billable currency abb.",
          "type": "string"
        },
        "TotalRegistrationCount": {
          "format": "int32",
          "description": "Gets or sets the total registration count.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeRegistrationFinancialData.TimeRegistrationFinancialDataStatusApiReadModel": {
      "type": "object",
      "properties": {
        "UserID": {
          "format": "int32",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "Completed": {
          "description": "Gets or sets whether the financial data has been completely processed.",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiReadModel": {
      "type": "object",
      "properties": {
        "TimeTrackerID": {
          "format": "int32",
          "description": "Gets or sets the time tracker identifier.",
          "type": "integer"
        },
        "UserID": {
          "format": "int32",
          "description": "Gets or sets the user identifier.",
          "type": "integer"
        },
        "Date": {
          "format": "date-time",
          "description": "Gets or sets the date.",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "description": "Gets or sets the start time.",
          "type": "string"
        },
        "EntityType": {
          "format": "int32",
          "description": "Gets or sets the type of the entity.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250
          ],
          "type": "integer"
        },
        "EntityID": {
          "format": "int32",
          "description": "Gets or sets the entity identifier.",
          "type": "integer"
        },
        "Task": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.Task.TaskApiReadModel",
          "description": "Gets or sets the task."
        },
        "AbsenceCode": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Salary.Models.AbsenceCode.AbsenceCodeApiReadModel",
          "description": "Gets or sets the absence code."
        },
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "Minute": {
          "format": "int32",
          "description": "Gets or sets the minute.",
          "type": "integer"
        },
        "BillableMinute": {
          "format": "int32",
          "description": "Gets or sets the billable minute.",
          "type": "integer"
        },
        "IsBillable": {
          "description": "Gets or sets the is billable.",
          "type": "boolean"
        },
        "TimeTrackerStatus": {
          "format": "int32",
          "description": "Gets or sets the time tracker status.",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "MonthlyPeriod": {
          "type": "string"
        },
        "AdditionalTextField": {
          "description": "Gets or sets the additional text field",
          "type": "string"
        },
        "Factor": {
          "format": "double",
          "description": "Gets or sets the factor field",
          "type": "number"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiUpdateModelDetail": {
      "type": "object",
      "properties": {
        "EntityType": {
          "format": "int32",
          "description": "Gets or sets the type of the entity.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250
          ],
          "type": "integer"
        },
        "EntityID": {
          "format": "int32",
          "description": "Gets or sets the entity identifier.",
          "type": "integer"
        },
        "IsBillable": {
          "description": "Gets or sets the is billable.",
          "type": "boolean"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "AdditionalTextField": {
          "description": "Gets or sets the additional text field",
          "type": "string"
        },
        "Factor": {
          "format": "double",
          "description": "Gets or sets the factor",
          "type": "number"
        },
        "TimeTrackerID": {
          "format": "int32",
          "description": "Gets or sets the time tracker identifier.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Models.TimeTracker.TimeTrackerApiCreateModelBase": {
      "type": "object",
      "properties": {
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "Minute": {
          "format": "int32",
          "description": "Gets or sets the minute.",
          "type": "integer"
        },
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Models.TimeTracker.TimeTrackerApiCreateModelForTask": {
      "type": "object",
      "properties": {
        "TaskID": {
          "format": "int32",
          "description": "Gets or sets the task identifier.",
          "type": "integer"
        },
        "BillableMinute": {
          "format": "int32",
          "description": "Gets or sets the billable minute.",
          "type": "integer"
        },
        "IsBillable": {
          "description": "Gets or sets a value indicating whether this instance is billable.",
          "type": "boolean"
        },
        "TimeRegistrationID": {
          "format": "int32",
          "description": "Gets or sets the time registration identifier.",
          "type": "integer"
        },
        "MonthlyPeriod": {
          "description": "Gets or sets monthly period",
          "type": "string"
        },
        "AdditionalTextField": {
          "description": "Gets or sets the additional text field",
          "type": "string"
        },
        "Factor": {
          "format": "double",
          "description": "Gets or sets Factor",
          "type": "number"
        },
        "Comment": {
          "description": "Gets or sets the comment.",
          "type": "string"
        },
        "Minute": {
          "format": "int32",
          "description": "Gets or sets the minute.",
          "type": "integer"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Common.Models.UnitType.UnitTypeApiReadModel": {
      "type": "object",
      "properties": {
        "UnitTypeID": {
          "format": "int32",
          "description": "Gets or sets the UnitType identifier.",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserUpdateModel": {
      "type": "object",
      "properties": {
        "ID": {
          "format": "uuid",
          "description": "Gets or sets the identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "FirstName": {
          "description": "Gets or sets the first name.",
          "type": "string"
        },
        "LastName": {
          "description": "Gets or sets the last name.",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Organization.Models.User.UserApiCreateModel": {
      "type": "object",
      "properties": {
        "UserName": {
          "description": "Gets or sets the Username",
          "type": "string"
        },
        "FirstName": {
          "description": "Gets or sets the first name.",
          "type": "string"
        },
        "LastName": {
          "description": "Gets or sets the last name.",
          "type": "string"
        },
        "Initials": {
          "description": "Gets or sets the initials.",
          "type": "string"
        },
        "Email": {
          "description": "Gets or sets the email.",
          "type": "string"
        },
        "Title": {
          "description": "Gets or sets the title.",
          "type": "string"
        },
        "EmployeeNo": {
          "description": "Gets or sets the employee number.",
          "type": "string"
        },
        "EmploymentDate": {
          "format": "date-time",
          "description": "Gets or sets the employment date.",
          "type": "string"
        },
        "LegalEntityID": {
          "format": "int32",
          "description": "Gets or sets the legal entity id.",
          "type": "integer"
        },
        "DepartmentID": {
          "format": "int32",
          "description": "Gets or sets the department id.",
          "type": "integer"
        },
        "ApprovalManagerID": {
          "format": "int32",
          "description": "Gets or sets the approval manager id.",
          "type": "integer"
        },
        "EmployeeTypeID": {
          "format": "int32",
          "description": "Gets or sets the employee type id.",
          "type": "integer"
        },
        "StandardHourlyRateID": {
          "format": "int32",
          "description": "Gets or sets the standard hourly rate id.",
          "type": "integer"
        },
        "CostPriceID": {
          "format": "int32",
          "description": "Gets or sets the cost price id.",
          "type": "integer"
        },
        "PublicHolidayCalendarID": {
          "format": "int32",
          "description": "Gets or sets the public holiday calendar id.",
          "type": "integer"
        },
        "AllowanceLegislationID": {
          "format": "int32",
          "description": "Gets or sets the allowance legislation id.",
          "type": "integer"
        },
        "NormalWorkingTimeID": {
          "format": "int32",
          "description": "Gets or sets the normal working time id.",
          "type": "integer"
        },
        "SalaryGroupID": {
          "format": "int32",
          "description": "Gets or sets the salary group id.",
          "type": "integer"
        },
        "UserRoleIDs": {
          "description": "Gets or sets the active roles on the user.",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.PreviewFeature.Models.UserPreviewFeatureValueApiReadModel": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets the name of the preview feature.",
          "type": "string"
        },
        "FeatureIdentifier": {
          "format": "int32",
          "description": "Gets or sets the preview feature identifier",
          "enum": [
            1,
            4
          ],
          "type": "integer"
        },
        "FeatureStage": {
          "format": "int32",
          "description": "Gets or sets the stage of the preview feature",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "ReleaseNumber": {
          "description": "Gets or sets the release number of the preview feature",
          "type": "string"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Common.Models.UserSetting.UserSettingApiReadModel": {
      "type": "object",
      "properties": {
        "CompanyName": {
          "description": "Gets or sets the name of the company.",
          "type": "string"
        },
        "NumberCultureID": {
          "format": "int32",
          "description": "Gets or sets the number culture identifier.",
          "type": "integer"
        },
        "TimeFormat": {
          "format": "int32",
          "description": "Gets or sets the time format.",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "TimeRoundingFormat": {
          "format": "int32",
          "description": "Gets or sets the time rounding format.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "type": "integer"
        },
        "BillableHourIsEditable": {
          "description": "Gets or sets a value indicating whether [billable hour is editable].",
          "type": "boolean"
        },
        "BillableHourIsEditableOnFixedPrice": {
          "description": "Gets or sets a value indicating whether [billable hour is editable on fixed price tasks].",
          "type": "boolean"
        },
        "ShowBillableCheckbox": {
          "description": "Gets or sets a value indicating whether [billable checkbox needs to be shown].",
          "type": "boolean"
        },
        "StopwatchTimeTracking": {
          "description": "Gets or sets a value indicating whether [stopwatch time tracking].",
          "type": "boolean"
        },
        "SystemCurrencyID": {
          "format": "int32",
          "description": "Gets or sets the system currency identifier.",
          "type": "integer"
        },
        "SystemCurrencyRate": {
          "format": "double",
          "description": "Gets or sets the system currency rate.",
          "type": "number"
        },
        "SystemCurrencyABB": {
          "description": "Gets or sets the system currency abb.",
          "type": "string"
        },
        "IsAbsenceActive": {
          "description": "Gets or sets a value indicating whether this instance is absence active.",
          "type": "boolean"
        },
        "RoundingOfBillableTime": {
          "description": "Gets or sets a value indicating whether [rounding of billable time].",
          "type": "boolean"
        },
        "Privileges": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Common.Models.UserSetting.PrivilegeApiReadModel",
          "description": "Gets or sets the privileges."
        },
        "SiteSettings": {
          "$ref": "#/definitions/TimeLog.TLP.Web.WebApi.V1.Common.Models.UserSetting.SiteSettingApiReadModel",
          "description": "Gets or sets the site settings such as whether the registrations are tied to recurring tasks"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Common.Models.UserSetting.PrivilegeApiReadModel": {
      "type": "object",
      "properties": {
        "RegistrationAllTasks": {
          "description": "Gets or sets a value indicating whether [user can register time on all tasks].",
          "type": "boolean"
        },
        "ExpenseTravelRegistrationAllProjects": {
          "description": "Gets or sets a value indicating whether [user can register expense and travel on all projects].",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Common.Models.UserSetting.SiteSettingApiReadModel": {
      "type": "object",
      "properties": {
        "TreatAllTimeRegistrationAsRecurringTask": {
          "description": "Gets or sets a value indicating whether [treat all time registration as recurring task].",
          "type": "boolean"
        },
        "TaskNumber": {
          "description": "Gets or sets a value indicating whether [task number is active].",
          "type": "boolean"
        },
        "ShowOdometer": {
          "description": "Gets or sets a value indicating whether [odometer is active].",
          "type": "boolean"
        },
        "OdometerIsRequired": {
          "description": "Gets or sets a value indicating whether [odometer is required].",
          "type": "boolean"
        },
        "CanUseTravelTimeTask": {
          "description": "Gets or sets a value indicating whether [travel time task feature is available on site].",
          "type": "boolean"
        },
        "FileAttachmentInExpense": {
          "description": "Gets or sets a value indicating whether [expense module supports file attachment].",
          "type": "boolean"
        },
        "ShowUserDefinedComment": {
          "description": "Gets or sets a value indicating whether [user-defined comment is active].",
          "type": "boolean"
        },
        "UserDefinedCommentName": {
          "description": "Gets or sets the value of the user-defined comment.",
          "type": "string"
        },
        "UserDefinedCommentDataType": {
          "description": "Gets or sets value indicating the data type for user defined comment",
          "type": "string"
        },
        "UseTimeRegistrationFinancialDataService": {
          "description": "Gets or sets value indicating the time registration financial data service is enabled",
          "type": "boolean"
        }
      }
    },
    "TimeLog.TLP.Web.WebApi.V1.Employees.Models.Workload.WorkloadApiCreateModel": {
      "type": "object",
      "properties": {
        "StartDate": {
          "format": "date-time",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "type": "string"
        },
        "Hours": {
          "format": "double",
          "type": "number"
        },
        "EmployeeId": {
          "format": "int32",
          "type": "integer"
        },
        "TaskId": {
          "format": "int32",
          "type": "integer"
        }
      }
    }
  },
  "tags": [
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Employees.Controllers.CostSchedulingServiceController[CostSchedulingServiceController]",
      "description": "Service for handling time registration service requests in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Employees.Controllers.WorkloadController[WorkloadController]",
      "description": "Service for handling bookings in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Employees.Controllers.EmployeeTypeController[EmployeeTypeController]",
      "description": "Service for handling employee types in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Employees.Controllers.NormalWorkingTimeController[NormalWorkingTimeController]",
      "description": "Service for handling normal working time in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Common.Controllers.UnitTypeController[UnitTypeController]",
      "description": "Service for handling unit types in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Common.Controllers.CurrencyController[CurrencyController]",
      "description": "Service for handling currency in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Common.Controllers.CountryController[CountryController]",
      "description": "Service for handling country in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Common.Controllers.UserSettingController[UserSettingController]",
      "description": "Service for handling user settings in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.CRM.Controllers.IndustryController[IndustryController]",
      "description": "Service for handling industries in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.CRM.Controllers.CustomerStatusController[CustomerStatusController]",
      "description": "Service for handling customer in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.CRM.Controllers.CustomerController[CustomerController]",
      "description": "Service for handling customer in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Expenses.Controllers.ProductController[ProductController]",
      "description": "Service for handling product in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Expenses.Controllers.ProjectProductController[ProjectProductController]",
      "description": "Service for handling project product in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Expenses.Controllers.ProjectExpenseController[ProjectExpenseController]",
      "description": "Service for handling project expenses in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Expenses.Controllers.EmployeeExpenseFinancialDataController[EmployeeExpenseFinancialDataController]",
      "description": "Service for handling employee expense financial data in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Expenses.Controllers.MileageRateController[MileageRateController]",
      "description": "Service for handling mileage in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Expenses.Controllers.PaymentMethodController[PaymentMethodController]",
      "description": "Service for handling payment method in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Expenses.Controllers.ExpenseTypeController[ExpenseTypeController]",
      "description": "Service for handling expense type in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Expenses.Controllers.EmployeeExpenseController[EmployeeExpenseController]",
      "description": "Service for handling employee expense in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Integration.Controllers.BusinessCentralController[BusinessCentralController]",
      "description": "Service for handling change log from Business Central integration in Timelog"
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Invoicing.Controllers.HourlyRateController[HourlyRateController]",
      "description": "Service for handling hourly rates in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Invoicing.Controllers.ContractHourlyRateController[ContractHourlyRateController]",
      "description": "Service for handling contract hourly rate in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Invoicing.Controllers.PaymentTermController[PaymentTermController]",
      "description": "Service for handling payment terms in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Invoicing.Controllers.CostPriceController[CostPriceController]",
      "description": "Service for handling cost price in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Organization.Controllers.LegalEntityController[LegalEntityController]",
      "description": "Service for handling legal entities in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Organization.Controllers.DepartmentController[DepartmentController]",
      "description": "Service for handling departments in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Organization.Controllers.EmployeeProjectionController[EmployeeProjectionController]",
      "description": "Service for handling employee projection in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Organization.Controllers.UserController[UserController]",
      "description": "Service for handling user in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Controllers.PaymentController[PaymentController]",
      "description": "Service for handling payments in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Controllers.ProjectTemplateController[ProjectTemplateController]",
      "description": "Service for handling project templates in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Controllers.ProjectSubContractController[ProjectSubContractController]",
      "description": "Service for handling contracts in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Controllers.AllocationController[AllocationController]",
      "description": "Service for handling allocations in TimeLog"
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Controllers.TaskTypeController[TaskTypeController]",
      "description": "Service for handling task types in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Controllers.ProjectTypeController[ProjectTypeController]",
      "description": "Service for handling project types in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Controllers.ProjectCategoryController[ProjectCategoryController]",
      "description": "Service for handling project categories in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Controllers.ContractModelController[ContractModelController]",
      "description": "Service for handling contract models in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Controllers.ProjectHeaderController[ProjectHeaderController]",
      "description": "Service for handling project header in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Controllers.TaskController[TaskController]",
      "description": "Service for handling task in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.ProjectManagement.Controllers.ProjectController[ProjectController]",
      "description": "Service for handling project in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Registration.Controllers.TimeRegistrationServiceController[TimeRegistrationServiceController]",
      "description": "Service for handling time registration service requests in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Registration.Controllers.TimeTrackingItemController[TimeTrackingItemController]",
      "description": "Service for handling time tracking item in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Index.Controllers.IndexController[IndexController]",
      "description": "Service for handling index in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Controllers.TimeRegistrationController[TimeRegistrationController]",
      "description": "Service for handling time registration in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Controllers.TimeRegistrationFinancialDataController[TimeRegistrationFinancialDataController]",
      "description": "Service for handling time registration financial data in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.TimeRegistration.Controllers.TimeTrackerController[TimeTrackerController]",
      "description": "Service for handling time tracker in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Salary.Controllers.AbsenceCodeController[AbsenceCodeController]",
      "description": "Service for handling absence code in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Salary.Controllers.AllowanceLegislationController[AllowanceLegislationController]",
      "description": "Service for handling allowance legislation in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Salary.Controllers.SalaryGroupController[SalaryGroupController]",
      "description": "Service for handling salary group in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Salary.Controllers.HolidayCalendarController[HolidayCalendarController]",
      "description": "Service for handling holiday calendar in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Salary.Controllers.SalaryAccountEmployeePostingController[SalaryAccountEmployeePostingController]",
      "description": "Service for handling salary account employee posting in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V1.Settings.Controllers.BarrierController[BarrierController]",
      "description": "Service for handling barrier in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V2.Index.Controllers.IndexController[IndexController]",
      "description": "V2 Service for handling index in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V2.Organization.Controllers.UsersController[UsersController]",
      "description": "Service for handling user in TimeLog."
    },
    {
      "name": "TimeLog.TLP.Web.WebApi.V2.TimeRegistration.Controllers.TimeTrackerController[TimeTrackerController]",
      "description": "Service for handling time tracker in TimeLog."
    }
  ]
}